
/*
 * File 'oqlctbstubsfe.cc'
 *
 * Package Name 'oqlctb'
 *
 * Generated by eyedbodl at Sat Dec  3 12:42:08 2005
 *
 * -------------------------------------
 * ------- DO NOT EDIT THIS CODE -------
 * -------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#include "oqlctb.h"

using namespace eyedb;

extern Status __method__OUT_oid_getOid_object(Database *_db, FEMethod_C *_m, Object *_o, Oid &retarg);

extern "C" Status
method__OUT_oid_getOid_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Oid _retarg = Oid::nullOid;

  status = __method__OUT_oid_getOid_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_string_toString_object(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_toString_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_toString_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_toString_object__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 flags, char * &retarg);

extern "C" Status
method__OUT_string_toString_object__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 flags = *_array[0]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_toString_object__IN_int32(_db, _m, _o, flags, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_database_REF__getDatabase_object(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDatabase * &retarg);

extern "C" Status
method__OUT_database_REF__getDatabase_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDatabase * _retarg = 0;

  status = __method__OUT_database_REF__getDatabase_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setDatabase_object__IN_database_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDatabase * arg1);

extern "C" Status
method__OUT_void_setDatabase_object__IN_database_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDatabase * arg1 = (OqlCtbDatabase *)_array[0]->getObject();

  status = __method__OUT_void_setDatabase_object__IN_database_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_dataspace_REF__getDataspace_object(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDataspace_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDataspace_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setDataspace_object__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_setDataspace_object__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_setDataspace_object__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_move_object__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_move_object__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_move_object__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_store_object(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_store_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_store_object(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_object_REF__clone_object(Database *_db, FEMethod_C *_m, Object *_o, Object * &retarg);

extern "C" Status
method__OUT_object_REF__clone_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Object * _retarg = 0;

  status = __method__OUT_object_REF__clone_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_int64_getCTime_object(Database *_db, FEMethod_C *_m, Object *_o, eyedblib::int64 &retarg);

extern "C" Status
method__OUT_int64_getCTime_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int64 _retarg = 0;

  status = __method__OUT_int64_getCTime_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_int64_getMTime_object(Database *_db, FEMethod_C *_m, Object *_o, eyedblib::int64 &retarg);

extern "C" Status
method__OUT_int64_getMTime_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int64 _retarg = 0;

  status = __method__OUT_int64_getMTime_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_string_getStringCTime_object(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_getStringCTime_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_getStringCTime_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_getStringMTime_object(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_getStringMTime_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_getStringMTime_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_bool_isRemoved_object(Database *_db, FEMethod_C *_m, Object *_o, Bool &retarg);

extern "C" Status
method__OUT_bool_isRemoved_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_isRemoved_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_bool_isModify_object(Database *_db, FEMethod_C *_m, Object *_o, Bool &retarg);

extern "C" Status
method__OUT_bool_isModify_object(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_isModify_object(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_void_setLock_object__IN_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, const OqlCtbLockMode::Type mode);

extern "C" Status
method__OUT_void_setLock_object__IN_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const OqlCtbLockMode::Type mode = (OqlCtbLockMode::Type)*_array[0]->getInteger32();

  status = __method__OUT_void_setLock_object__IN_lock_mode(_db, _m, _o, mode);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_setLock_object__IN_lock_mode__OUT_int32(Database *_db, FEMethod_C *_m, Object *_o, const OqlCtbLockMode::Type mode, eyedblib::int32 &rmode);

extern "C" Status
method__OUT_void_setLock_object__IN_lock_mode__OUT_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const OqlCtbLockMode::Type mode = (OqlCtbLockMode::Type)*_array[0]->getInteger32();
  eyedblib::int32 rmode = 0;

  status = __method__OUT_void_setLock_object__IN_lock_mode__OUT_int32(_db, _m, _o, mode, rmode);
  if (status) return status;

  _array[1]->set(rmode);
  return Success;
}

extern Status __method__OUT_void_getLock_object__OUT_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbLockMode::Type &rmode);

extern "C" Status
method__OUT_void_getLock_object__OUT_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbLockMode::Type rmode = (OqlCtbLockMode::Type)0;

  status = __method__OUT_void_getLock_object__OUT_lock_mode(_db, _m, _o, rmode);
  if (status) return status;

  _array[0]->set(rmode);
  return Success;
}

extern Status __method__OUT_dataspace_REF__getDefaultInstanceDataspace_class(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDefaultInstanceDataspace_class(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDefaultInstanceDataspace_class(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setDefaultInstanceDataspace_class__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_setDefaultInstanceDataspace_class__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_setDefaultInstanceDataspace_class__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_moveInstances_class__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_moveInstances_class__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_moveInstances_class__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_int32_getCount_index(Database *_db, FEMethod_C *_m, Object *_o, eyedblib::int32 &retarg);

extern "C" Status
method__OUT_int32_getCount_index(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_getCount_index(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_dataspace_REF__getDefaultDataspace_index(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDefaultDataspace_index(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDefaultDataspace_index(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setDefaultDataspace_index__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_setDefaultDataspace_index__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_setDefaultDataspace_index__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_move_index__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_move_index__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_move_index__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_string_getImplementation_index__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const Bool local, char * &retarg);

extern "C" Status
method__OUT_string_getImplementation_index__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Bool local = (Bool)*_array[0]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_getImplementation_index__IN_bool(_db, _m, _o, local, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_getStats_index(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_getStats_index(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_getStats_index(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_getStats_index__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const Bool full, char * &retarg);

extern "C" Status
method__OUT_string_getStats_index__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Bool full = (Bool)*_array[0]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_getStats_index__IN_bool(_db, _m, _o, full, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_simulate_index__IN_int32__IN_string__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 idxtype, const char * hints, const Bool full, char * &retarg);

extern "C" Status
method__OUT_string_simulate_index__IN_int32__IN_string__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 idxtype = *_array[0]->getInteger32();
  const char * hints = _array[1]->getString();
  const Bool full = (Bool)*_array[2]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_simulate_index__IN_int32__IN_string__IN_bool(_db, _m, _o, idxtype, hints, full, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_reimplement_index__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * hints);

extern "C" Status
method__OUT_void_reimplement_index__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * hints = _array[0]->getString();

  status = __method__OUT_void_reimplement_index__IN_string(_db, _m, _o, hints);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_oid_reimplement_index__IN_int32__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 idxtype, const char * hints, Oid &retarg);

extern "C" Status
method__OUT_oid_reimplement_index__IN_int32__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 idxtype = *_array[0]->getInteger32();
  const char * hints = _array[1]->getString();
  Oid _retarg = Oid::nullOid;

  status = __method__OUT_oid_reimplement_index__IN_int32__IN_string(_db, _m, _o, idxtype, hints, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_int32_getCount_collection(Database *_db, FEMethod_C *_m, Object *_o, eyedblib::int32 &retarg);

extern "C" Status
method__OUT_int32_getCount_collection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_getCount_collection(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_string_getName_collection(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_getName_collection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_getName_collection(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setName_collection__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * name);

extern "C" Status
method__OUT_void_setName_collection__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * name = _array[0]->getString();

  status = __method__OUT_void_setName_collection__IN_string(_db, _m, _o, name);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_bool_isIn_collection__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj, Bool &retarg);

extern "C" Status
method__OUT_bool_isIn_collection__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();
  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_isIn_collection__IN_oid(_db, _m, _o, obj, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_oid_ARRAY__getElements_collection__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj, Oid * &retarg, int &retarg_cnt);

extern "C" Status
method__OUT_oid_ARRAY__getElements_collection__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();
  int _retarg_cnt = 0;
  Oid *_retarg = 0;

  status = __method__OUT_oid_ARRAY__getElements_collection__IN_oid(_db, _m, _o, obj, _retarg, _retarg_cnt);
  if (status) return status;

  __retarg.set(_retarg, _retarg_cnt, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_bool_isLiteral_collection(Database *_db, FEMethod_C *_m, Object *_o, Bool &retarg);

extern "C" Status
method__OUT_bool_isLiteral_collection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_isLiteral_collection(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_oid_getLiteralOid_collection(Database *_db, FEMethod_C *_m, Object *_o, Oid &retarg);

extern "C" Status
method__OUT_oid_getLiteralOid_collection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Oid _retarg = Oid::nullOid;

  status = __method__OUT_oid_getLiteralOid_collection(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_dataspace_REF__getDefaultDataspace_collection(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDefaultDataspace_collection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDefaultDataspace_collection(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setDefaultDataspace_collection__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_setDefaultDataspace_collection__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_setDefaultDataspace_collection__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_moveElements_collection__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_moveElements_collection__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_moveElements_collection__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_string_getImplementation_collection__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const Bool local, char * &retarg);

extern "C" Status
method__OUT_string_getImplementation_collection__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Bool local = (Bool)*_array[0]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_getImplementation_collection__IN_bool(_db, _m, _o, local, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_getImplStats_collection(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_getImplStats_collection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_getImplStats_collection(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_getImplStats_collection__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const Bool full, char * &retarg);

extern "C" Status
method__OUT_string_getImplStats_collection__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Bool full = (Bool)*_array[0]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_getImplStats_collection__IN_bool(_db, _m, _o, full, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_string_simulate_collection__IN_int32__IN_string__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 idxtype, const char * hints, const Bool full, char * &retarg);

extern "C" Status
method__OUT_string_simulate_collection__IN_int32__IN_string__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 idxtype = *_array[0]->getInteger32();
  const char * hints = _array[1]->getString();
  const Bool full = (Bool)*_array[2]->getInteger32();
  char * _retarg = 0;

  status = __method__OUT_string_simulate_collection__IN_int32__IN_string__IN_bool(_db, _m, _o, idxtype, hints, full, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_reimplement_collection__IN_int32__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 idxtype, const char * hints);

extern "C" Status
method__OUT_void_reimplement_collection__IN_int32__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 idxtype = *_array[0]->getInteger32();
  const char * hints = _array[1]->getString();

  status = __method__OUT_void_reimplement_collection__IN_int32__IN_string(_db, _m, _o, idxtype, hints);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_addTo_set__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj);

extern "C" Status
method__OUT_void_addTo_set__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();

  status = __method__OUT_void_addTo_set__IN_oid(_db, _m, _o, obj);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_suppress_set__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj);

extern "C" Status
method__OUT_void_suppress_set__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();

  status = __method__OUT_void_suppress_set__IN_oid(_db, _m, _o, obj);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_addTo_bag__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj);

extern "C" Status
method__OUT_void_addTo_bag__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();

  status = __method__OUT_void_addTo_bag__IN_oid(_db, _m, _o, obj);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_suppress_bag__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj);

extern "C" Status
method__OUT_void_suppress_bag__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();

  status = __method__OUT_void_suppress_bag__IN_oid(_db, _m, _o, obj);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_setInAt_array__IN_int32__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 pos, const Oid obj);

extern "C" Status
method__OUT_void_setInAt_array__IN_int32__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 pos = *_array[0]->getInteger32();
  const Oid obj = *_array[1]->getOid();

  status = __method__OUT_void_setInAt_array__IN_int32__IN_oid(_db, _m, _o, pos, obj);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_append_array__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid obj);

extern "C" Status
method__OUT_void_append_array__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid obj = *_array[0]->getOid();

  status = __method__OUT_void_append_array__IN_oid(_db, _m, _o, obj);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_suppressAt_array__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 arg1);

extern "C" Status
method__OUT_void_suppressAt_array__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 arg1 = *_array[0]->getInteger32();

  status = __method__OUT_void_suppressAt_array__IN_int32(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_oid_retrieveAt_array__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 arg1, Oid &retarg);

extern "C" Status
method__OUT_oid_retrieveAt_array__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 arg1 = *_array[0]->getInteger32();
  Oid _retarg = Oid::nullOid;

  status = __method__OUT_oid_retrieveAt_array__IN_int32(_db, _m, _o, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_string_getConfigValue_eyedb__IN_string(Database *_db, FEMethod_C *_m, const char * name, char * &retarg);

extern "C" Status
method_static_OUT_string_getConfigValue_eyedb__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * name = _array[0]->getString();
  char * _retarg = 0;

  status = __method_static_OUT_string_getConfigValue_eyedb__IN_string(_db, _m, name, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method_static_OUT_string_getVersion_eyedb(Database *_db, FEMethod_C *_m, char * &retarg);

extern "C" Status
method_static_OUT_string_getVersion_eyedb(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method_static_OUT_string_getVersion_eyedb(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method_static_OUT_int32_getVersionNumber_eyedb(Database *_db, FEMethod_C *_m, eyedblib::int32 &retarg);

extern "C" Status
method_static_OUT_int32_getVersionNumber_eyedb(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_getVersionNumber_eyedb(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_string_getCompilationTime_eyedb(Database *_db, FEMethod_C *_m, char * &retarg);

extern "C" Status
method_static_OUT_string_getCompilationTime_eyedb(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method_static_OUT_string_getCompilationTime_eyedb(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method_static_OUT_string_getArchitecture_eyedb(Database *_db, FEMethod_C *_m, char * &retarg);

extern "C" Status
method_static_OUT_string_getArchitecture_eyedb(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method_static_OUT_string_getArchitecture_eyedb(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_open_connection(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_open_connection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_open_connection(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_open_connection__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * host, const char * port);

extern "C" Status
method__OUT_void_open_connection__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * host = _array[0]->getString();
  const char * port = _array[1]->getString();

  status = __method__OUT_void_open_connection__IN_string__IN_string(_db, _m, _o, host, port);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_close_connection(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_close_connection(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_close_connection(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_open_database__IN_connection_REF___IN_int32(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbConnection * conn, const eyedblib::int32 mode);

extern "C" Status
method__OUT_void_open_database__IN_connection_REF___IN_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbConnection * conn = (OqlCtbConnection *)_array[0]->getObject();
  const eyedblib::int32 mode = *_array[1]->getInteger32();

  status = __method__OUT_void_open_database__IN_connection_REF___IN_int32(_db, _m, _o, conn, mode);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_open_database__IN_connection_REF___IN_int32__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbConnection * conn, const eyedblib::int32 mode, const char * userauth, const char * passwdauth);

extern "C" Status
method__OUT_void_open_database__IN_connection_REF___IN_int32__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbConnection * conn = (OqlCtbConnection *)_array[0]->getObject();
  const eyedblib::int32 mode = *_array[1]->getInteger32();
  const char * userauth = _array[2]->getString();
  const char * passwdauth = _array[3]->getString();

  status = __method__OUT_void_open_database__IN_connection_REF___IN_int32__IN_string__IN_string(_db, _m, _o, conn, mode, userauth, passwdauth);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_open_database__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 mode);

extern "C" Status
method__OUT_void_open_database__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 mode = *_array[0]->getInteger32();

  status = __method__OUT_void_open_database__IN_int32(_db, _m, _o, mode);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_open_database__IN_int32__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 mode, const char * userauth, const char * passwdauth);

extern "C" Status
method__OUT_void_open_database__IN_int32__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 mode = *_array[0]->getInteger32();
  const char * userauth = _array[1]->getString();
  const char * passwdauth = _array[2]->getString();

  status = __method__OUT_void_open_database__IN_int32__IN_string__IN_string(_db, _m, _o, mode, userauth, passwdauth);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_close_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_close_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_close_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method_static_OUT_bool_isAutoPersistMode_database(Database *_db, FEMethod_C *_m, Bool &retarg);

extern "C" Status
method_static_OUT_bool_isAutoPersistMode_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method_static_OUT_bool_isAutoPersistMode_database(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_void_setAutoPersistMode_database__IN_bool(Database *_db, FEMethod_C *_m, const Bool arg1);

extern "C" Status
method_static_OUT_void_setAutoPersistMode_database__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Bool arg1 = (Bool)*_array[0]->getInteger32();

  status = __method_static_OUT_void_setAutoPersistMode_database__IN_bool(_db, _m, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_bool_isDefaultDatabase_database(Database *_db, FEMethod_C *_m, Object *_o, Bool &retarg);

extern "C" Status
method__OUT_bool_isDefaultDatabase_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_isDefaultDatabase_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_void_setDefaultDatabase_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_setDefaultDatabase_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_setDefaultDatabase_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_create_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_create_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_create_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_create_database__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * userauth, const char * passwdauth);

extern "C" Status
method__OUT_void_create_database__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * userauth = _array[0]->getString();
  const char * passwdauth = _array[1]->getString();

  status = __method__OUT_void_create_database__IN_string__IN_string(_db, _m, _o, userauth, passwdauth);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_destroy_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_destroy_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_destroy_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_destroy_database__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * userauth, const char * passwdauth);

extern "C" Status
method__OUT_void_destroy_database__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * userauth = _array[0]->getString();
  const char * passwdauth = _array[1]->getString();

  status = __method__OUT_void_destroy_database__IN_string__IN_string(_db, _m, _o, userauth, passwdauth);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_rename_database__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * newname);

extern "C" Status
method__OUT_void_rename_database__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * newname = _array[0]->getString();

  status = __method__OUT_void_rename_database__IN_string(_db, _m, _o, newname);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_rename_database__IN_string__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * newname, const char * userauth, const char * passwdauth);

extern "C" Status
method__OUT_void_rename_database__IN_string__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * newname = _array[0]->getString();
  const char * userauth = _array[1]->getString();
  const char * passwdauth = _array[2]->getString();

  status = __method__OUT_void_rename_database__IN_string__IN_string__IN_string(_db, _m, _o, newname, userauth, passwdauth);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_connection_REF__getConnection_database(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbConnection * &retarg);

extern "C" Status
method__OUT_connection_REF__getConnection_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbConnection * _retarg = 0;

  status = __method__OUT_connection_REF__getConnection_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_int32_getOpenMode_database(Database *_db, FEMethod_C *_m, Object *_o, eyedblib::int32 &retarg);

extern "C" Status
method__OUT_int32_getOpenMode_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_getOpenMode_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_bool_getCommitOnClose_database(Database *_db, FEMethod_C *_m, Object *_o, Bool &retarg);

extern "C" Status
method__OUT_bool_getCommitOnClose_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_getCommitOnClose_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_void_setCommitOnClose_database__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, const Bool arg1);

extern "C" Status
method__OUT_void_setCommitOnClose_database__IN_bool(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Bool arg1 = (Bool)*_array[0]->getInteger32();

  status = __method__OUT_void_setCommitOnClose_database__IN_bool(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_int32_getVersionNumber_database(Database *_db, FEMethod_C *_m, Object *_o, eyedblib::int32 &retarg);

extern "C" Status
method__OUT_int32_getVersionNumber_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_getVersionNumber_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_string_getVersion_database(Database *_db, FEMethod_C *_m, Object *_o, char * &retarg);

extern "C" Status
method__OUT_string_getVersion_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  char * _retarg = 0;

  status = __method__OUT_string_getVersion_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_removeObject_database__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid arg1);

extern "C" Status
method__OUT_void_removeObject_database__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid arg1 = *_array[0]->getOid();

  status = __method__OUT_void_removeObject_database__IN_oid(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_uncacheObject_database__IN_object_REF_(Database *_db, FEMethod_C *_m, Object *_o, Object * arg1);

extern "C" Status
method__OUT_void_uncacheObject_database__IN_object_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Object * arg1 = (Object *)_array[0]->getObject();

  status = __method__OUT_void_uncacheObject_database__IN_object_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_uncacheObject_database__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, const Oid arg1);

extern "C" Status
method__OUT_void_uncacheObject_database__IN_oid(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid arg1 = *_array[0]->getOid();

  status = __method__OUT_void_uncacheObject_database__IN_oid(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_transactionBegin_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_transactionBegin_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_transactionBegin_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_transactionBegin_database__IN_int32__IN_int32__IN_int32__IN_int32__IN_int32__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int32 trsmode, const eyedblib::int32 lockmode, const eyedblib::int32 recovmode, const eyedblib::int32 _magorder, const eyedblib::int32 ratioalrt, const eyedblib::int32 wait_timeout);

extern "C" Status
method__OUT_void_transactionBegin_database__IN_int32__IN_int32__IN_int32__IN_int32__IN_int32__IN_int32(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 trsmode = *_array[0]->getInteger32();
  const eyedblib::int32 lockmode = *_array[1]->getInteger32();
  const eyedblib::int32 recovmode = *_array[2]->getInteger32();
  const eyedblib::int32 _magorder = *_array[3]->getInteger32();
  const eyedblib::int32 ratioalrt = *_array[4]->getInteger32();
  const eyedblib::int32 wait_timeout = *_array[5]->getInteger32();

  status = __method__OUT_void_transactionBegin_database__IN_int32__IN_int32__IN_int32__IN_int32__IN_int32__IN_int32(_db, _m, _o, trsmode, lockmode, recovmode, _magorder, ratioalrt, wait_timeout);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_transactionCommit_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_transactionCommit_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_transactionCommit_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_transactionAbort_database(Database *_db, FEMethod_C *_m, Object *_o);

extern "C" Status
method__OUT_void_transactionAbort_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;


  status = __method__OUT_void_transactionAbort_database(_db, _m, _o);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_bool_isInTransaction_database(Database *_db, FEMethod_C *_m, Object *_o, Bool &retarg);

extern "C" Status
method__OUT_bool_isInTransaction_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  Bool _retarg = (Bool)0;

  status = __method__OUT_bool_isInTransaction_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method__OUT_datafile_REF__ARRAY__getDatafiles_database(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDatafile * * &retarg, int &retarg_cnt);

extern "C" Status
method__OUT_datafile_REF__ARRAY__getDatafiles_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  int _retarg_cnt = 0;
  OqlCtbDatafile * *_retarg = 0;

  status = __method__OUT_datafile_REF__ARRAY__getDatafiles_database(_db, _m, _o, _retarg, _retarg_cnt);
  if (status) return status;

  __retarg.set((Object **)_retarg, _retarg_cnt, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_datafile_REF__getDatafile_database__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * name, OqlCtbDatafile * &retarg);

extern "C" Status
method__OUT_datafile_REF__getDatafile_database__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * name = _array[0]->getString();
  OqlCtbDatafile * _retarg = 0;

  status = __method__OUT_datafile_REF__getDatafile_database__IN_string(_db, _m, _o, name, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_datafile_REF__getDatafile_database__IN_int16(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int16 id, OqlCtbDatafile * &retarg);

extern "C" Status
method__OUT_datafile_REF__getDatafile_database__IN_int16(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int16 id = *_array[0]->getInteger16();
  OqlCtbDatafile * _retarg = 0;

  status = __method__OUT_datafile_REF__getDatafile_database__IN_int16(_db, _m, _o, id, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_dataspace_REF__ARRAY__getDataspaces_database(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * * &retarg, int &retarg_cnt);

extern "C" Status
method__OUT_dataspace_REF__ARRAY__getDataspaces_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  int _retarg_cnt = 0;
  OqlCtbDataspace * *_retarg = 0;

  status = __method__OUT_dataspace_REF__ARRAY__getDataspaces_database(_db, _m, _o, _retarg, _retarg_cnt);
  if (status) return status;

  __retarg.set((Object **)_retarg, _retarg_cnt, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_dataspace_REF__getDataspace_database__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * name, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDataspace_database__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * name = _array[0]->getString();
  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDataspace_database__IN_string(_db, _m, _o, name, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_dataspace_REF__getDataspace_database__IN_int16(Database *_db, FEMethod_C *_m, Object *_o, const eyedblib::int16 id, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDataspace_database__IN_int16(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int16 id = *_array[0]->getInteger16();
  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDataspace_database__IN_int16(_db, _m, _o, id, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_dataspace_REF__getDefaultDataspace_database(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * &retarg);

extern "C" Status
method__OUT_dataspace_REF__getDefaultDataspace_database(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * _retarg = 0;

  status = __method__OUT_dataspace_REF__getDefaultDataspace_database(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, Argument::AutoFullGarbage);
  return Success;
}

extern Status __method__OUT_void_setDefaultDataspace_database__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, OqlCtbDataspace * arg1);

extern "C" Status
method__OUT_void_setDefaultDataspace_database__IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  OqlCtbDataspace * arg1 = (OqlCtbDataspace *)_array[0]->getObject();

  status = __method__OUT_void_setDefaultDataspace_database__IN_dataspace_REF_(_db, _m, _o, arg1);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_moveObjects_database__IN_oid_ARRAY___IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, const Oid *obj, int obj_cnt, OqlCtbDataspace * arg2);

extern "C" Status
method__OUT_void_moveObjects_database__IN_oid_ARRAY___IN_dataspace_REF_(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  int obj_cnt = 0;
  const Oid *obj = _array[0]->getOids(obj_cnt);
  OqlCtbDataspace * arg2 = (OqlCtbDataspace *)_array[1]->getObject();

  status = __method__OUT_void_moveObjects_database__IN_oid_ARRAY___IN_dataspace_REF_(_db, _m, _o, obj, obj_cnt, arg2);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_updateScheme_database__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * odlfile, const char * package);

extern "C" Status
method__OUT_void_updateScheme_database__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * odlfile = _array[0]->getString();
  const char * package = _array[1]->getString();

  status = __method__OUT_void_updateScheme_database__IN_string__IN_string(_db, _m, _o, odlfile, package);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_updateScheme_database__IN_string__IN_string__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * odlfile, const char * package, const char * schname, const char * db_prefix);

extern "C" Status
method__OUT_void_updateScheme_database__IN_string__IN_string__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * odlfile = _array[0]->getString();
  const char * package = _array[1]->getString();
  const char * schname = _array[2]->getString();
  const char * db_prefix = _array[3]->getString();

  status = __method__OUT_void_updateScheme_database__IN_string__IN_string__IN_string__IN_string(_db, _m, _o, odlfile, package, schname, db_prefix);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_updateScheme_database__IN_string__IN_string__IN_string__IN_string__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, const char * odlfile, const char * package, const char * schname, const char * db_prefix, const char * cpp_cmd, const char * cpp_flags);

extern "C" Status
method__OUT_void_updateScheme_database__IN_string__IN_string__IN_string__IN_string__IN_string__IN_string(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const char * odlfile = _array[0]->getString();
  const char * package = _array[1]->getString();
  const char * schname = _array[2]->getString();
  const char * db_prefix = _array[3]->getString();
  const char * cpp_cmd = _array[4]->getString();
  const char * cpp_flags = _array[5]->getString();

  status = __method__OUT_void_updateScheme_database__IN_string__IN_string__IN_string__IN_string__IN_string__IN_string(_db, _m, _o, odlfile, package, schname, db_prefix, cpp_cmd, cpp_flags);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_setObjectLock_database__IN_oid__IN_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, const Oid _oid, const OqlCtbLockMode::Type mode);

extern "C" Status
method__OUT_void_setObjectLock_database__IN_oid__IN_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid _oid = *_array[0]->getOid();
  const OqlCtbLockMode::Type mode = (OqlCtbLockMode::Type)*_array[1]->getInteger32();

  status = __method__OUT_void_setObjectLock_database__IN_oid__IN_lock_mode(_db, _m, _o, _oid, mode);
  if (status) return status;

  return Success;
}

extern Status __method__OUT_void_setObjectLock_database__IN_oid__IN_lock_mode__OUT_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, const Oid _oid, const OqlCtbLockMode::Type mode, OqlCtbLockMode::Type &rmode);

extern "C" Status
method__OUT_void_setObjectLock_database__IN_oid__IN_lock_mode__OUT_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid _oid = *_array[0]->getOid();
  const OqlCtbLockMode::Type mode = (OqlCtbLockMode::Type)*_array[1]->getInteger32();
  OqlCtbLockMode::Type rmode = (OqlCtbLockMode::Type)0;

  status = __method__OUT_void_setObjectLock_database__IN_oid__IN_lock_mode__OUT_lock_mode(_db, _m, _o, _oid, mode, rmode);
  if (status) return status;

  _array[2]->set(rmode);
  return Success;
}

extern Status __method__OUT_void_getObjectLock_database__IN_oid__OUT_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, const Oid _oid, OqlCtbLockMode::Type &rmode);

extern "C" Status
method__OUT_void_getObjectLock_database__IN_oid__OUT_lock_mode(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const Oid _oid = *_array[0]->getOid();
  OqlCtbLockMode::Type rmode = (OqlCtbLockMode::Type)0;

  status = __method__OUT_void_getObjectLock_database__IN_oid__OUT_lock_mode(_db, _m, _o, _oid, rmode);
  if (status) return status;

  _array[1]->set(rmode);
  return Success;
}

extern Status __method_static_OUT_float_acos_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_acos_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_acos_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_asin_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_asin_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_asin_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_atan_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_atan_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_atan_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_atan2_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_atan2_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_atan2_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_cos_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_cos_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_cos_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_sin_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_sin_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_sin_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_tan_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_tan_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_tan_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_cosh_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_cosh_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_cosh_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_sinh_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_sinh_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_sinh_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_tanh_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_tanh_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_tanh_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_exp_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_exp_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_exp_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_log_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_log_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_log_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_log10_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_log10_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_log10_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_pow_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_pow_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_pow_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_sqrt_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_sqrt_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_sqrt_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_ceil_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_ceil_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_ceil_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_fabs_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_fabs_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_fabs_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_floor_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_floor_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_floor_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_fmod_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_fmod_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_fmod_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_erf_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_erf_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_erf_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_erfc_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_erfc_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_erfc_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_gamma_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_gamma_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_gamma_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_hypot_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_hypot_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_hypot_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_int32_isnan_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, eyedblib::int32 &retarg);

extern "C" Status
method_static_OUT_int32_isnan_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_isnan_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_j0_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_j0_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_j0_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_j1_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_j1_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_j1_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_jn_math__IN_int32__IN_float(Database *_db, FEMethod_C *_m, const eyedblib::int32 arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_jn_math__IN_int32__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 arg1 = *_array[0]->getInteger32();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_jn_math__IN_int32__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_lgamma_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_lgamma_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_lgamma_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_y0_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_y0_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_y0_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_y1_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_y1_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_y1_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_yn_math__IN_int32__IN_float(Database *_db, FEMethod_C *_m, const eyedblib::int32 arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_yn_math__IN_int32__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const eyedblib::int32 arg1 = *_array[0]->getInteger32();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_yn_math__IN_int32__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_acosh_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_acosh_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_acosh_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_asinh_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_asinh_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_asinh_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_atanh_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_atanh_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_atanh_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_cbrt_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_cbrt_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_cbrt_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_logb_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_logb_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_logb_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_nextafter_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_nextafter_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_nextafter_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_remainder_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_remainder_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_remainder_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_scalb_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, const double arg1, const double arg2, double &retarg);

extern "C" Status
method_static_OUT_float_scalb_math__IN_float__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  const double arg2 = *_array[1]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_scalb_math__IN_float__IN_float(_db, _m, arg1, arg2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_expm1_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_expm1_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_expm1_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_int32_ilogb_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, eyedblib::int32 &retarg);

extern "C" Status
method_static_OUT_int32_ilogb_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_ilogb_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_log1p_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_log1p_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_log1p_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

extern Status __method_static_OUT_float_rint_math__IN_float(Database *_db, FEMethod_C *_m, const double arg1, double &retarg);

extern "C" Status
method_static_OUT_float_rint_math__IN_float(Database *_db, FEMethod_C *_m, Object *_o, ArgArray &_array, Argument &__retarg)
{
  Status status;

  const double arg1 = *_array[0]->getFloat();
  double _retarg = 0;

  status = __method_static_OUT_float_rint_math__IN_float(_db, _m, arg1, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return Success;
}

