
/*
 * File 'oqlctb.h'
 *
 * Package Name 'oqlctb'
 *
 * Generated by eyedbodl at Sat Dec  3 12:42:08 2005
 *
 * -------------------------------------
 * ------- DO NOT EDIT THIS CODE -------
 * -------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#ifndef _eyedb_oqlctb_
#define _eyedb_oqlctb_

using namespace eyedb;

namespace eyedb {

class OqlCtbDatafile;
class OqlCtbDataspace;
class OqlCtbEyedb;
class OqlCtbConnection;
class OqlCtbDatabase;
class OqlCtbMath;
class oql;

class oqlctb {

 public:
  static void init();
  static void release();
  static Status updateSchema(Database *db);
  static Status updateSchema(Schema *m);
};

class oqlctbDatabase : public Database {

 public:
  oqlctbDatabase(const char *s, const char *_dbmdb_str = 0) : Database(s, _dbmdb_str) {}
  oqlctbDatabase(const char *s, int _dbid, const char *_dbmdb_str = 0) : Database(s, _dbid, _dbmdb_str) {}
  oqlctbDatabase(int _dbid, const char *_dbmdb_str = 0) : Database(_dbid, _dbmdb_str) {}
  Status open(Connection *, Database::OpenFlag, const char * = 0, const char * = 0);
  Status open(Connection *, Database::OpenFlag, const OpenHints *hints, const char * = 0, const char * = 0);
  static void setConsApp(Database *);
  static Status checkSchema(Schema *);
  static Bool getDynamicGetErrorPolicy();
  static Bool getDynamicSetErrorPolicy();
  static void setDynamicGetErrorPolicy(Bool policy);
  static void setDynamicSetErrorPolicy(Bool policy);
};

class OqlCtbDatabaseOpenMode {

public:
  enum Type {
    DBRead = 2,
    DBRW = 4,
    DBAdmin = 16,
    DBOpenLocal = 32
  };
};

class OqlCtbLockMode {

public:
  enum Type {
    DefaultLock = 0,
    LockN = 1,
    LockX = 2,
    LockSX = 3,
    LockS = 4,
    LockP = 5
  };
};

class OqlCtbTransactionMode {

public:
  enum Type {
    TransactionOff = 1,
    TransactionOn = 2
  };
};

class OqlCtbTransactionLockMode {

public:
  enum Type {
    ReadSWriteS = 1,
    ReadSWriteSX = 2,
    ReadSWriteX = 3,
    ReadSXWriteSX = 4,
    ReadSXWriteX = 5,
    ReadXWriteX = 6,
    ReadNWriteS = 7,
    ReadNWriteSX = 8,
    ReadNWriteX = 9,
    ReadNWriteN = 10,
    DatabaseX = 11
  };
};

class OqlCtbRecoveryMode {

public:
  enum Type {
    RecoveryOff = 3,
    RecoveryPartial = 4,
    RecoveryFull = 5
  };
};

class OqlCtbToStringFlags {

public:
  enum Type {
    MTimeTrace = 1,
    CTimeTrace = 2,
    CMTimeTrace = 3,
    PointerTrace = 4,
    CompOidTrace = 8,
    NativeTrace = 16,
    ContentsTrace = 32,
    InhAttrTrace = 64,
    InhExecTrace = 128,
    ExecBodyTrace = 256,
    SysExecTrace = 512,
    NoScopeTrace = 1024,
    FullRecursTrace = 4096
  };
};

class OqlCtbMapType {

public:
  enum Type {
    BitmapType = 0,
    LinkmapType = 1
  };
};

class OqlCtbDatType {

public:
  enum Type {
    LogicalOidType = 256,
    PhysicalOidType = 257
  };
};

class OqlCtbDatafile : public Struct {

 public:
  OqlCtbDatafile(Database * = 0, const Dataspace * = 0);
  OqlCtbDatafile(const OqlCtbDatafile& x);

  virtual Object *clone() const {return new OqlCtbDatafile(*this);};

  OqlCtbDatafile& operator=(const OqlCtbDatafile& x);

  virtual OqlCtbDatafile *asOqlCtbDatafile() {return this;}
  virtual const OqlCtbDatafile *asOqlCtbDatafile() const {return this;}

  Status setId(eyedblib::int16);
  eyedblib::int16 getId(Bool *isnull = 0, Status * = 0)  const;

  Status setDspid(eyedblib::int16);
  eyedblib::int16 getDspid(Bool *isnull = 0, Status * = 0)  const;

  Status setDsp(OqlCtbDataspace*);
  OqlCtbDataspace *getDsp(Bool *isnull = 0, Status * = 0) ;
  const OqlCtbDataspace *getDsp(Bool *isnull = 0, Status * = 0) const;
  Oid getDspOid(Status * = 0);
  Status setDspOid(const Oid &);

  Status setFile(const char *);
  Status setFile(unsigned int a0, char);
  const char *getFile(Bool *isnull = 0, Status * = 0) const;
  char getFile(unsigned int a0, Bool *isnull = 0, Status * = 0)  const;

  Status setName(const char *);
  Status setName(unsigned int a0, char);
  const char *getName(Bool *isnull = 0, Status * = 0) const;
  char getName(unsigned int a0, Bool *isnull = 0, Status * = 0)  const;

  Status setMtype(OqlCtbMapType::Type, Bool _check_value = True);
  OqlCtbMapType::Type getMtype(Bool *isnull = 0, Status * = 0)  const;

  Status setMaxsize(eyedblib::int32);
  eyedblib::int32 getMaxsize(Bool *isnull = 0, Status * = 0)  const;

  Status setSlotsize(eyedblib::int32);
  eyedblib::int32 getSlotsize(Bool *isnull = 0, Status * = 0)  const;

  Status setDtype(OqlCtbDatType::Type, Bool _check_value = True);
  OqlCtbDatType::Type getDtype(Bool *isnull = 0, Status * = 0)  const;
  virtual ~OqlCtbDatafile() {garbageRealize();}
  // OqlCtbDatafile User Part

    Datafile *xdatfile;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
  

 protected:
  OqlCtbDatafile(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  OqlCtbDatafile(const Struct *x, Bool share, int) : Struct(x, share) {}
  OqlCtbDatafile(const OqlCtbDatafile *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  OqlCtbDatafile(const Struct *, Bool = False);
  OqlCtbDatafile(const OqlCtbDatafile *, Bool = False);
  OqlCtbDatafile(const Class *, Data);
};

class OqlCtbDataspace : public Struct {

 public:
  OqlCtbDataspace(Database * = 0, const Dataspace * = 0);
  OqlCtbDataspace(const OqlCtbDataspace& x);

  virtual Object *clone() const {return new OqlCtbDataspace(*this);};

  OqlCtbDataspace& operator=(const OqlCtbDataspace& x);

  virtual OqlCtbDataspace *asOqlCtbDataspace() {return this;}
  virtual const OqlCtbDataspace *asOqlCtbDataspace() const {return this;}

  Status setId(eyedblib::int16);
  eyedblib::int16 getId(Bool *isnull = 0, Status * = 0)  const;

  Status setName(const char *);
  Status setName(unsigned int a0, char);
  const char *getName(Bool *isnull = 0, Status * = 0) const;
  char getName(unsigned int a0, Bool *isnull = 0, Status * = 0)  const;

  Status setDatafiles(unsigned int a0, OqlCtbDatafile*);
  OqlCtbDatafile *getDatafiles(unsigned int a0, Bool *isnull = 0, Status * = 0) ;
  const OqlCtbDatafile *getDatafiles(unsigned int a0, Bool *isnull = 0, Status * = 0) const;
  Oid getDatafilesOid(unsigned int a0, Status * = 0);
  Status setDatafilesOid(unsigned int a0, const Oid &);
  unsigned int getDatafilesCount(Status * = 0) const;
  virtual ~OqlCtbDataspace() {garbageRealize();}
  // OqlCtbDataspace User Part

    Dataspace *xdataspace;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
  

 protected:
  OqlCtbDataspace(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  OqlCtbDataspace(const Struct *x, Bool share, int) : Struct(x, share) {}
  OqlCtbDataspace(const OqlCtbDataspace *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  OqlCtbDataspace(const Struct *, Bool = False);
  OqlCtbDataspace(const OqlCtbDataspace *, Bool = False);
  OqlCtbDataspace(const Class *, Data);
};

class OqlCtbEyedb : public Struct {

 public:
  OqlCtbEyedb(Database * = 0, const Dataspace * = 0);
  OqlCtbEyedb(const OqlCtbEyedb& x);

  virtual Object *clone() const {return new OqlCtbEyedb(*this);};

  OqlCtbEyedb& operator=(const OqlCtbEyedb& x);

  virtual OqlCtbEyedb *asOqlCtbEyedb() {return this;}
  virtual const OqlCtbEyedb *asOqlCtbEyedb() const {return this;}
  virtual ~OqlCtbEyedb() {garbageRealize();}

 protected:
  OqlCtbEyedb(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  OqlCtbEyedb(const Struct *x, Bool share, int) : Struct(x, share) {}
  OqlCtbEyedb(const OqlCtbEyedb *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  OqlCtbEyedb(const Struct *, Bool = False);
  OqlCtbEyedb(const OqlCtbEyedb *, Bool = False);
  OqlCtbEyedb(const Class *, Data);
};

class OqlCtbConnection : public Struct {

 public:
  OqlCtbConnection(Database * = 0, const Dataspace * = 0);
  OqlCtbConnection(const OqlCtbConnection& x);

  virtual Object *clone() const {return new OqlCtbConnection(*this);};

  OqlCtbConnection& operator=(const OqlCtbConnection& x);

  virtual OqlCtbConnection *asOqlCtbConnection() {return this;}
  virtual const OqlCtbConnection *asOqlCtbConnection() const {return this;}
  virtual ~OqlCtbConnection() {garbageRealize();}
  // OqlCtbConnection User Part

    Connection *conn;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
    

 protected:
  OqlCtbConnection(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  OqlCtbConnection(const Struct *x, Bool share, int) : Struct(x, share) {}
  OqlCtbConnection(const OqlCtbConnection *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  OqlCtbConnection(const Struct *, Bool = False);
  OqlCtbConnection(const OqlCtbConnection *, Bool = False);
  OqlCtbConnection(const Class *, Data);
};

class OqlCtbDatabase : public Struct {

 public:
  OqlCtbDatabase(Database * = 0, const Dataspace * = 0);
  OqlCtbDatabase(const OqlCtbDatabase& x);

  virtual Object *clone() const {return new OqlCtbDatabase(*this);};

  OqlCtbDatabase& operator=(const OqlCtbDatabase& x);

  virtual OqlCtbDatabase *asOqlCtbDatabase() {return this;}
  virtual const OqlCtbDatabase *asOqlCtbDatabase() const {return this;}

  Status setDbname(const char *);
  Status setDbname(unsigned int a0, char);
  const char *getDbname(Bool *isnull = 0, Status * = 0) const;
  char getDbname(unsigned int a0, Bool *isnull = 0, Status * = 0)  const;

  Status setDbid(eyedblib::int32);
  eyedblib::int32 getDbid(Bool *isnull = 0, Status * = 0)  const;

  Status setDbmdb(const char *);
  Status setDbmdb(unsigned int a0, char);
  const char *getDbmdb(Bool *isnull = 0, Status * = 0) const;
  char getDbmdb(unsigned int a0, Bool *isnull = 0, Status * = 0)  const;
  virtual ~OqlCtbDatabase() {garbageRealize();}
  // OqlCtbDatabase User Part

    Database *xdb;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
    

 protected:
  OqlCtbDatabase(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  OqlCtbDatabase(const Struct *x, Bool share, int) : Struct(x, share) {}
  OqlCtbDatabase(const OqlCtbDatabase *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  OqlCtbDatabase(const Struct *, Bool = False);
  OqlCtbDatabase(const OqlCtbDatabase *, Bool = False);
  OqlCtbDatabase(const Class *, Data);
};

class OqlCtbMath : public Struct {

 public:
  OqlCtbMath(Database * = 0, const Dataspace * = 0);
  OqlCtbMath(const OqlCtbMath& x);

  virtual Object *clone() const {return new OqlCtbMath(*this);};

  OqlCtbMath& operator=(const OqlCtbMath& x);

  virtual OqlCtbMath *asOqlCtbMath() {return this;}
  virtual const OqlCtbMath *asOqlCtbMath() const {return this;}
  virtual ~OqlCtbMath() {garbageRealize();}

 protected:
  OqlCtbMath(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  OqlCtbMath(const Struct *x, Bool share, int) : Struct(x, share) {}
  OqlCtbMath(const OqlCtbMath *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  OqlCtbMath(const Struct *, Bool = False);
  OqlCtbMath(const OqlCtbMath *, Bool = False);
  OqlCtbMath(const Class *, Data);
};

class oql : public Struct {

 public:
  oql(Database * = 0, const Dataspace * = 0);
  oql(const oql& x);

  virtual Object *clone() const {return new oql(*this);};

  oql& operator=(const oql& x);

  virtual oql *asOql() {return this;}
  virtual const oql *asOql() const {return this;}
  virtual ~oql() {garbageRealize();}

 protected:
  oql(Database *_db, const Dataspace *_dataspace, int) : Struct(_db, _dataspace) {}
  oql(const Struct *x, Bool share, int) : Struct(x, share) {}
  oql(const oql *x, Bool share, int) : Struct(x, share) {}

 private:
  void initialize(Database *_db);

 public: /* restricted */
  oql(const Struct *, Bool = False);
  oql(const oql *, Bool = False);
  oql(const Class *, Data);
};


#define OqlCtbDatafile_(X) ((OqlCtbDatafile *)(X))

#define OqlCtbDataspace_(X) ((OqlCtbDataspace *)(X))

#define OqlCtbEyedb_(X) ((OqlCtbEyedb *)(X))

#define OqlCtbConnection_(X) ((OqlCtbConnection *)(X))

#define OqlCtbDatabase_(X) ((OqlCtbDatabase *)(X))

#define OqlCtbMath_(X) ((OqlCtbMath *)(X))

#define Oql_(X) ((oql *)(X))

extern Object *oqlctbMakeObject(Object *, Bool=True);
extern Bool oqlctb_set_oid_check(Bool);
extern Bool oqlctb_get_oid_check();

}

#endif
