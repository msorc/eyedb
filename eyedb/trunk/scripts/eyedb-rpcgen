#!/bin/sh
#
# eyedb-rpcgen
#
# usage: eyedb-rpcgen < file
#
# where file (or stdin) contains lines as:
#       <name> <rpc_name> <args>
#
#       where <args> is a list of:
#          IN|OUT|INOUT <type> <arg>
#
#       where <type> is one of:
#          db
#          int
#          string
#          oid
#          data
#

# ---- example ----

# oqlCreate OQL_CREATE IN db dbh IN string oql OUT int qid OUT data schinfo OUT int count

# oqlDelete OQL_DELETE IN db dbh IN int qid

# oqlGetNext OQL_GETNEXT IN int qid IN int wanted OUT int found OUT data value_array

# ------------------

# the goal of eyedb-rpcgen is to make 95% of the stubs generation for eyedb RPC
#
# missing:
#  + tests
#

AWK=nawk
AWK=awk

sed -e 's/#.*//' | $AWK '
function usage(x)
{
	printf("%s\n", x);
	printf("usage: eyedb-rpcgen file\n\n");

	printf("       where file (or file) contains lines as:\n");
	printf("          <name> <rpc_name> <args>\n\n");

	printf("       where <args> is a list of:\n");
	printf("          IN|OUT|INOUT <type> <arg>\n\n");

	printf("       where <type> is one of:\n");
	printf("          db\n");
	printf("          int\n");
	printf("          string\n");
	printf("          oid\n");
	printf("          data\n");

	exit 1;
}

function gettype(s)
{
	if (s == "short")
		return "rpc_Int16Type";
	if (s == "db" || s == "int")
		return "rpc_Int32Type";
	if (s == "int64")
		return "rpc_Int64Type";
	if (s == "string")
		return "rpc_StringType";
	if (s == "oid")
		return "OidType";
	if (s == "data")
		return "rpc_DataType";
	usage("invalid type " s);
}

function getRef(s)
{
        if (s == "OUT" || s == "INOUT")
		return " *";
	return "";
}

function getConst(s)
{
	if (s == "IN")
		return "const ";
	return "";
}

function getCtype(inout, s, arg, isbe)
{
  if (s == "db") {
    type = "DbHandle *" getRef(inout);
    if (arg != "")
      return type " " arg;
    return type;
  }
  if (s == "int") {
    type = "int" getRef(inout);
    if (arg != "")
      return type " " arg;
    return type;
  }
  if (s == "short") {
    type = "eyedblib::int16" getRef(inout);
    if (arg != "")
      return type " " arg;
    return type;
  }
  if (s == "int64") {
    type = "eyedblib::int64" getRef(inout);
    if (arg != "")
      return type " " arg;
    return type;
  }
  if (s == "string") {
    type = getConst(inout) "char *" getRef(inout);
    if (arg != "")
      return type " " arg;
    return type;
  }
  if (s == "oid") {
    type = getConst(inout) "Oid *" getRef(inout);
    if (arg != "")
      return type " " arg;
    return type;
  }

  if (s == "data") {
    btype = getConst(inout) "idbData" getRef(inout);
    if (inout == "IN") {
      if (!isbe) {
	if (arg != "")
	  return btype " " arg ", unsigned int " arg "_size";
	return btype ",  unsigned int";
      }
      else {
	if (arg != "")
	  return btype " " arg ", unsigned int " arg "_size, void * x" arg;
	return btype ", unsigned int, void *";
      }
    }
    else {
      if (!isbe) {
	if (arg != "")
	  return btype " " arg;
	return btype;
      }
      else {
	if (arg != "")
	  return btype " " arg ", void * x" arg;
	return btype ", void *";
      }
    }
  }

  usage("invalid type " s);
}

function getinout(s)
{
	if (s == "IN")
		return "rpc_Send";
	if (s == "OUT")
		return "rpc_Rcv";
	if (s == "INOUT")
		return "rpc_Send|rpc_Rcv";
	usage("invalid inout: " s);
}

BEGIN {
	nfun = 0;
}

NF > 1 {
	name[nfun] = $1;
	rpc_name[nfun] = $2;
	nargs[nfun] = 0;

	for (i = 3; i <= NF; i += 3)
	{
		if ($i != "IN" && $i != "OUT" && $i != "INOUT")
			usage("invalid IN/OUT: " $i);
		arg_inout[nfun nargs[nfun]] = $i;
		arg_type[nfun nargs[nfun]] = $(i+1);
		arg_name[nfun nargs[nfun]] = $(i+2);
		nargs[nfun]++;
		
	}
	nfun++;
}

function rpc_get_type(s)
{
	if (s == "db")
		return "int";
	return s;
}

function rpc_fe_get(type, name)
{
	if (type == "db")
		return "RDBHID_GET(" name ")";	
	if (type == "int")
		return name;
	if (type == "oid")
		return "*" name;
	if (type == "string")
		return "(char *)" name;
	return name;
}

function makeRpcLib_h_1(i)
{
	printf("    IDB_%s,\n", rpc_name[i]);
}

function makeRpcLib_h_2(i)
{
	printf("    *make%s(void),\n", rpc_name[i]);
}

function makeRpcLib_c(i)
{
	printf("rpc_RpcDescription *\n");
	printf("make%s(void)\n{\n", rpc_name[i]);
	printf("  rpc_RpcDescription *rd = rpc_newRpcDescription(IDB_%s, %d);\n", rpc_name[i], nargs[i] + 1);
	printf("  int n = 0;\n\n");

	for (j = 0 ; j < nargs[i]; j++)
	{
		printf("  rd->args[n].type = %s; /* %s */\n",
			gettype(arg_type[i j]), arg_name[i j]);
		printf("  rd->args[n++].send_rcv = %s;\n",
			getinout(arg_inout[i j]));
	}
	printf("\n  makeSTATUS(rd, n);\n");
	printf("  return rd;\n");
	printf("}\n\n");
}

function makeFE_h_1(i)
{
	printf("  *%s_RPC,\n", rpc_name[i]);
}

function rpc_fe_data(i, j)
{
	if (arg_inout[i j] == "IN" || arg_inout[i j] == "INOUT")
	{
		printf("      pua->a_data.data = (const idbData)%s;\n",
			arg_name[i j]);
		printf("      pua++->a_data.size = %s_size;\n",
		       arg_name[i j]);
	}
	else
	{
		printf("      pua->a_data.data = 0; /* force RPC to allocate buffer */\n");
		printf("      pua++->a_data.size   = 0;\n");
	}
}

function makeFE_h_2(i)
{
	printf("extern RPCStatus\n");
	printf("%s(", name[i]);
	
	for (j = 0 ; j < nargs[i]; j++)
	{
		if (j)
		  printf(", ");
		printf(getCtype(arg_inout[i j], arg_type[i j], "", 0));
	}
	printf(");\n\n");
}

function makeFE_c(i)
{
	printf("RPCStatus\n");
	printf("%s(", name[i]);
	for (j = 0 ; j < nargs[i]; j++)
	{
		if (j) printf(", ");
		printf(getCtype(arg_inout[i j], arg_type[i j], arg_name[i j]), 0);
	}
	printf(")\n{\n");
	printf("  if (DBH_IS_LOCAL(dbh))\n");
	printf("    return IDB_%s((DbHandle *)dbh->u.dbh", name[i]);
	for (j = 1 ; j < nargs[i]; j++)
	{
		printf(", ");
		if (arg_type[i j] == "data") {
		  if (arg_inout[i j] == "IN")
		    printf("%s, %s_size, 0", arg_name[i j], arg_name[i j]);
		  else
		    printf("%s, 0", arg_name[i j]);
		}
		else
		  printf("%s", arg_name[i j]);
	}
	printf(");\n");
	printf("  else {\n");
	printf("    ClientArg ua[IDB_MAXARGS], *pua = ua;\n");
	printf("    int r, offset;\n");

	for (j = 0 ; j < nargs[i]; j++)
	{
		if (arg_type[i j] == "data")
			rpc_fe_data(i, j);
		else if (arg_inout[i j] == "IN" || arg_inout[i j] == "INOUT")
		{
			printf("    pua++->a_%s = %s;\n", \
			rpc_get_type(arg_type[i j]), \
			rpc_fe_get(arg_type[i j], arg_name[i j]));;
		}
		else
			printf("    pua++;\n");
	}
	printf("\n    RPC_RPCMAKE(%s->ch->ch, %s_RPC, ua);\n\n",
			arg_name[i 0], rpc_name[i]);

	for (j = 0 ; j < nargs[i]; j++)
	{
		if (arg_inout[i j] == "OUT" || arg_inout[i j] == "INOUT")
		{
			printf("    *%s = ua[%d].a_%s;\n", \
                        arg_name[i j], j,\
			rpc_get_type(arg_type[i j]), \
			rpc_fe_get(arg_type[i j]));
	        }
	}

	printf("\n");
	printf("    status_copy(status_r, ua[%d].a_status);\n", nargs[i]);
	printf("    STATUS_RETURN(status_r);\n");
	printf("  }\n");
	printf("}\n\n");
}

function makelib_FE_c_1(i)
{
	printf("  *%s_RPC,\n", rpc_name[i]);
}

function makelib_FE_c_2(i)
{
	printf("\n  %s_RPC =\n", rpc_name[i]);
	printf("    rpc_makeUserClientFunction(client, make%s());\n",
		rpc_name[i]);
}

function makelib_BE_h_1(i)
{
	printf("  *%s_RPC,\n", rpc_name[i]);
}

function makelib_BE_h_2(i)
{
	printf("\nextern void\n");
	printf("%s_realize(rpc_ClientId, void *);\n", rpc_name[i]);
}

function makelib_BE_c_1(i)
{
	printf("  *%s_RPC,\n", rpc_name[i]);
}

function makelib_BE_c_2(i)
{
	printf("\n  %s_RPC =\n", rpc_name[i]);
	printf("    rpc_makeUserServerFunction(server, make%s(), %s_realize);\n",
		rpc_name[i], rpc_name[i]);
}

function amper(i, j)
{
	if (arg_type[i j] == "oid" || arg_type[i j] == "data" || 
	    arg_inout[i j] == "OUT" || arg_inout[i j] == "INOUT")
	    return "&";
	return "";
}

function make_BE_c(i)
{
	printf("\nvoid\n");
	printf("%s_realize(rpc_ClientId clientid, void *xua)\n", rpc_name[i]);
	printf("{\n");
	printf("  ServerArg *ua = (ServerArg *)xua;\n");
	printf("  RPCStatus status;\n");
	printf("  rpcDB_DbHandleClientInfo *dcinfo = rpcDB_clientDbhGet(clientid, ua[0].a_int);\n");
	printf("\n");
	printf("  if (dcinfo)\n");
	printf("    status = IDB_%s((DbHandle *)dcinfo->dbh", name[i]);
	for (j = 1; j < nargs[i]; j++)
	{
		printf(", ");
		if (arg_type[i j] == "data") {
		  if (arg_inout[i j] == "IN")
		    printf("ua[%d].a_data.data, ua[%d].a_data.size, &ua[%d].a_data", j, j, j);
		  else
		    printf("0, &ua[%d].a_data", j);
		}
		else
		  printf("%sua[%d].a_%s", amper(i, j), j, arg_type[i j]);
	}
	printf(");\n");
	printf("  else\n");
	printf("    status = RPCInvalidDbId;\n");
	printf("\n");
	printf("  RPC_STATUS_MAKE(status, ua, %d);\n", nargs[i]);
	printf("}\n");

}

function make_KERN_h(i)
{
	printf("extern RPCStatus\n");
	printf("IDB_%s(", name[i]);
	for (j = 0; j < nargs[i]; j++)
	{
		if (j) printf(", ");
		printf(getCtype(arg_inout[i j], arg_type[i j], "", 1));
	}
	printf(");\n\n");
}

function make_KERN_cc(i)
{
	printf("\nRPCStatus\n");
	printf("IDB_%s(", name[i]);
	for (j = 0; j < nargs[i]; j++)
	{
		if (j) printf(", ");
		printf(getCtype(arg_inout[i j], arg_type[i j], arg_name[i j], 1));
	}
	printf(")\n{\n  return RPCSuccess;\n}\n\n");
}

END {
	printf("\n/* rpc_lib.h, near line 176 */\n\n");
	for (i = 0; i < nfun; i++)
		makeRpcLib_h_1(i);
	printf("\n/* rpc_lib.h, near line 328 */\n\n");
	for (i = 0; i < nfun; i++)
		makeRpcLib_h_2(i);
	printf("\n/* rpc_lib.cc */\n\n");
	for (i = 0; i < nfun; i++)
		makeRpcLib_c(i);
	printf("\n/* api_lib.h */\n\n");
	for (i = 0; i < nfun; i++)
		makeFE_h_1(i);
	printf("\n/* api_lib.h */\n\n");
	for (i = 0; i < nfun; i++)
		makeFE_h_2(i);
	printf("\n/* api.cc */\n\n");
	for (i = 0; i < nfun; i++)
		makeFE_c(i);
	printf("\n/* api_lib.c */\n\n");
	for (i = 0; i < nfun; i++)
		makelib_FE_c_1(i);
	for (i = 0; i < nfun; i++)
		makelib_FE_c_2(i);
	printf("\n/* serv_lib.h */\n\n");
	for (i = 0; i < nfun; i++)
		makelib_BE_h_1(i);
	for (i = 0; i < nfun; i++)
		makelib_BE_h_2(i);
	printf("\n/* serv_lib.cc */\n\n");
	for (i = 0; i < nfun; i++)
		makelib_BE_c_1(i);
	for (i = 0; i < nfun; i++)
		makelib_BE_c_2(i);
	printf("\n/* serv.cc */\n\n");
	for (i = 0; i < nfun; i++)
		make_BE_c(i);
	printf("\n/* kernel.h */\n\n");
	for (i = 0; i < nfun; i++)
		make_KERN_h(i);
	printf("\n/* kernel.cc */\n\n");
	for (i = 0; i < nfun; i++)
		make_KERN_cc(i);
}' -
