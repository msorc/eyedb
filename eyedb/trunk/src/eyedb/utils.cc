
/*
 * File 'utils.cc'
 *
 * Package Name 'utils'
 *
 * Generated by eyedbodl at Thu Dec  8 15:48:28 2005
 *
 * -------------------------------------
 * ------- DO NOT EDIT THIS CODE -------
 * -------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#include <eyedb/internals/ObjectPeer.h>
#include <eyedb/internals/ClassPeer.h>
#include <eyedb/internals/kern_const.h>

#include <eyedb/utils.h>

#define min(x,y)((x)<(y)?(x):(y))

namespace eyedb {

static Bool dynget_error_policy = False;
static Bool dynset_error_policy = True;
static Oid nulloid;
static unsigned char nulldata[1];
static Bool oid_check = True;
static int class_ind;
static Database::consapp_t *constructors_x = new Database::consapp_t[104];
static Object *(*constructors[104])(const Object *, Bool);
static GenHashTable *hash;
#define make_object utilsMakeObject
extern void utilsInit(void);
extern void utilsRelease(void);
extern Status utilsSchemaUpdate(Database *);
extern Status utilsSchemaUpdate(Schema *);

static Class *index_Class = new Class("index");

void utils::init()
{
  utilsInit();
}

void utils::release()
{
  utilsRelease();
}

Status utils::updateSchema(Database *db)
{
  return utilsSchemaUpdate(db);
}

Status utils::updateSchema(Schema *m)
{
  return utilsSchemaUpdate(m);
}

EnumClass *ImageType_Class;
EnumClass *Month_Class;
EnumClass *Weekday_Class;
StructClass *Image_Class;
StructClass *URL_Class;
StructClass *WConfig_Class;
StructClass *Date_Class;
StructClass *Time_Class;
StructClass *TimeStamp_Class;
StructClass *TimeInterval_Class;
StructClass *OString_Class;

static Size ImageType_idr_objsz, ImageType_idr_psize;

static EnumClass *ImageType_make(EnumClass *ImageType_class = 0, Schema *m = 0)
{
  if (!ImageType_class)
    return new EnumClass("image_type");
  EnumItem *en[7];
  en[0] = new EnumItem("GIF_IMG_TYPE", "GIF_IMG_TYPE", (unsigned int)1);
  en[1] = new EnumItem("JPEG_IMG_TYPE", "JPEG_IMG_TYPE", (unsigned int)2);
  en[2] = new EnumItem("PM_IMG_TYPE", "PM_IMG_TYPE", (unsigned int)3);
  en[3] = new EnumItem("PBM_IMG_TYPE", "PBM_IMG_TYPE", (unsigned int)4);
  en[4] = new EnumItem("X11BITMAP_IMG_TYPE", "X11BITMAP_IMG_TYPE", (unsigned int)5);
  en[5] = new EnumItem("BMP_IMG_TYPE", "BMP_IMG_TYPE", (unsigned int)6);
  en[6] = new EnumItem("TIFF_IMG_TYPE", "TIFF_IMG_TYPE", (unsigned int)7);

  ImageType_class->setEnumItems(en, 7);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];

  ClassPeer::setMType(ImageType_class, Class::System);

  return ImageType_class;
}

static void ImageType_init_p()
{
  ImageType_Class = ImageType_make();
}

static void ImageType_init()
{
  ImageType_make(ImageType_Class);

  ImageType_idr_objsz = ImageType_Class->getIDRObjectSize(&ImageType_idr_psize, 0);

  ObjectPeer::setUnrealizable(ImageType_Class, True);
}

static Size Month_idr_objsz, Month_idr_psize;

static EnumClass *Month_make(EnumClass *Month_class = 0, Schema *m = 0)
{
  if (!Month_class)
    return new EnumClass("month");
  EnumItem *en[12];
  en[0] = new EnumItem("JANUARY", "January", (unsigned int)1);
  en[1] = new EnumItem("FEBRUARY", "February", (unsigned int)2);
  en[2] = new EnumItem("MARCH", "March", (unsigned int)3);
  en[3] = new EnumItem("APRIL", "April", (unsigned int)4);
  en[4] = new EnumItem("MAY", "May", (unsigned int)5);
  en[5] = new EnumItem("JUNE", "June", (unsigned int)6);
  en[6] = new EnumItem("JULY", "July", (unsigned int)7);
  en[7] = new EnumItem("AUGUST", "August", (unsigned int)8);
  en[8] = new EnumItem("SEPTEMBER", "September", (unsigned int)9);
  en[9] = new EnumItem("OCTOBER", "October", (unsigned int)10);
  en[10] = new EnumItem("NOVEMBER", "November", (unsigned int)11);
  en[11] = new EnumItem("DECEMBER", "December", (unsigned int)12);

  Month_class->setEnumItems(en, 12);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];
  delete en[7];
  delete en[8];
  delete en[9];
  delete en[10];
  delete en[11];

  ClassPeer::setMType(Month_class, Class::System);

  return Month_class;
}

static void Month_init_p()
{
  Month_Class = Month_make();
}

static void Month_init()
{
  Month_make(Month_Class);

  Month_idr_objsz = Month_Class->getIDRObjectSize(&Month_idr_psize, 0);

  ObjectPeer::setUnrealizable(Month_Class, True);
}

static Size Weekday_idr_objsz, Weekday_idr_psize;

static EnumClass *Weekday_make(EnumClass *Weekday_class = 0, Schema *m = 0)
{
  if (!Weekday_class)
    return new EnumClass("weekday");
  EnumItem *en[7];
  en[0] = new EnumItem("SUNDAY", "Sunday", (unsigned int)0);
  en[1] = new EnumItem("MONDAY", "Monday", (unsigned int)1);
  en[2] = new EnumItem("TUESDAY", "Tuesday", (unsigned int)2);
  en[3] = new EnumItem("WEDNESDAY", "Wednesday", (unsigned int)3);
  en[4] = new EnumItem("THURSDAY", "Thursday", (unsigned int)4);
  en[5] = new EnumItem("FRIDAY", "Friday", (unsigned int)5);
  en[6] = new EnumItem("SATURDAY", "Saturday", (unsigned int)6);

  Weekday_class->setEnumItems(en, 7);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];

  ClassPeer::setMType(Weekday_class, Class::System);

  return Weekday_class;
}

static void Weekday_init_p()
{
  Weekday_Class = Weekday_make();
}

static void Weekday_init()
{
  Weekday_make(Weekday_Class);

  Weekday_idr_objsz = Weekday_Class->getIDRObjectSize(&Weekday_idr_psize, 0);

  ObjectPeer::setUnrealizable(Weekday_Class, True);
}

static const Attribute **Image_agritems;
static Size Image_idr_objsz, Image_idr_psize;

static StructClass *Image_make(StructClass *Image_class = 0, Schema *m = 0)
{
  if (!Image_class)
    return new StructClass("image", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[7];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new Attribute((m ? m->getClass("char") : Char_Class), "name", False, 1, dims);
  delete[] dims;

  dims = 0;
  attr[3] = new Attribute((m ? m->getClass("image_type") : ImageType_Class), "type", False, 0, dims);

  dims = new int[1];
  dims[0] = -1;
  attr[4] = new Attribute((m ? m->getClass("byte") : Byte_Class), "data", False, 1, dims);
  delete[] dims;

  dims = 0;
  attr[5] = new Attribute((m ? m->getClass("int") : Int32_Class), "w", False, 0, dims);

  dims = 0;
  attr[6] = new Attribute((m ? m->getClass("int") : Int32_Class), "h", False, 0, dims);

  Image_class->setAttributes(&attr[2], 5);

  delete attr[2];
  delete attr[3];
  delete attr[4];
  delete attr[5];
  delete attr[6];

  ClassPeer::setMType(Image_class, Class::System);

  return Image_class;
}

Object *Image_construct_x(const Class *cls, Data idr)
{
  return new Image(cls, idr);
}

Object *Image_construct(const Object *o, Bool share)
{
  return new Image((const Struct *)o, share);
}

static void Image_init_p()
{
  Image_Class = Image_make();
  constructors_x[class_ind] = Image_construct_x;
  constructors[class_ind] = Image_construct;
  hash->insert("image", class_ind++);
}

static void Image_init()
{
  Image_make(Image_Class);

  Image_agritems = Image_Class->getAttributes();
  Image_idr_objsz = Image_Class->getIDRObjectSize(&Image_idr_psize, 0);

  ObjectPeer::setUnrealizable(Image_Class, True);
}

static Status Image_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

Image::Image(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

Image::Image(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void Image::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("image") : Image_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

Image::Image(const Image& x) : Struct(x)
{
  userCopy(x);
}

Image& Image::operator=(const Image& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

Image::Image(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("image") : Image_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Image::Image(const Image *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("image") : Image_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status Image::setName(const char *_name)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_name) + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)_name, len, 0);
  return status;

}

Status Image::setName(unsigned int a0, char _name)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_name, 1, from);
  return status;
}

const char *Image::getName(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char Image::getName(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status Image::setType(ImageType::Type _type, Bool _check_value)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  eyedblib::int32 __tmp = _type;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)&__tmp, 1, 0, _check_value);
  return status;
}

ImageType::Type Image::getType(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return (ImageType::Type)0;}
  return (ImageType::Type)__tmp;
}

Status Image::setData(const unsigned char *_data, unsigned int len)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[4]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (Data)_data, len, 0);
  return status;

}

Status Image::setData(unsigned int a0, unsigned char _data)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (Data)&_data, 1, from);
  return status;
}

Status Image::setDataCount(unsigned int a0)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;
  status = getClass()->getAttributes()[4]->setSize(this, from);
  return status;
}

const unsigned char *Image::getData(unsigned int *len, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  if (len) *len = getDataCount();
  return (const unsigned char *)data;
}

unsigned char Image::getData(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  unsigned char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

unsigned int Image::getDataCount(Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Size size;
  Status s;
  s = getClass()->getAttributes()[4]->getSize(this, size);
  if (s) {if (rs) *rs = s; return 0;}
  return (int)size;
}

Status Image::setW(eyedblib::int32 _w)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[5]->setValue(this, (Data)&_w, 1, 0);
  return status;
}

eyedblib::int32 Image::getW(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[5]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status Image::setH(eyedblib::int32 _h)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[6]->setValue(this, (Data)&_h, 1, 0);
  return status;
}

eyedblib::int32 Image::getH(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[6]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **URL_agritems;
static Size URL_idr_objsz, URL_idr_psize;

static StructClass *URL_make(StructClass *URL_class = 0, Schema *m = 0)
{
  if (!URL_class)
    return new StructClass("URL", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[4];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new Attribute((m ? m->getClass("char") : Char_Class), "proto", False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[3] = new Attribute((m ? m->getClass("char") : Char_Class), "url", False, 1, dims);
  delete[] dims;

  URL_class->setAttributes(&attr[2], 2);

  delete attr[2];
  delete attr[3];

  ClassPeer::setMType(URL_class, Class::System);

  return URL_class;
}

Object *URL_construct_x(const Class *cls, Data idr)
{
  return new URL(cls, idr);
}

Object *URL_construct(const Object *o, Bool share)
{
  return new URL((const Struct *)o, share);
}

static void URL_init_p()
{
  URL_Class = URL_make();
  constructors_x[class_ind] = URL_construct_x;
  constructors[class_ind] = URL_construct;
  hash->insert("URL", class_ind++);
}

static void URL_init()
{
  URL_make(URL_Class);

  URL_agritems = URL_Class->getAttributes();
  URL_idr_objsz = URL_Class->getIDRObjectSize(&URL_idr_psize, 0);

  ObjectPeer::setUnrealizable(URL_Class, True);
}

static Status URL_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

URL::URL(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

URL::URL(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void URL::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("URL") : URL_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

URL::URL(const URL& x) : Struct(x)
{
  userCopy(x);
}

URL& URL::operator=(const URL& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

URL::URL(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("URL") : URL_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

URL::URL(const URL *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("URL") : URL_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status URL::setProto(const char *_proto)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_proto) + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)_proto, len, 0);
  return status;

}

Status URL::setProto(unsigned int a0, char _proto)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_proto, 1, from);
  return status;
}

const char *URL::getProto(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char URL::getProto(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status URL::setUrl(const char *_url)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_url) + 1;

  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[3]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)_url, len, 0);
  return status;

}

Status URL::setUrl(unsigned int a0, char _url)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[3]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)&_url, 1, from);
  return status;
}

const char *URL::getUrl(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char URL::getUrl(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **WConfig_agritems;
static Size WConfig_idr_objsz, WConfig_idr_psize;

static StructClass *WConfig_make(StructClass *WConfig_class = 0, Schema *m = 0)
{
  if (!WConfig_class)
    return new StructClass("w_config", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[5];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new Attribute((m ? m->getClass("char") : Char_Class), "name", False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[3] = new Attribute((m ? m->getClass("char") : Char_Class), "user", False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[4] = new Attribute((m ? m->getClass("char") : Char_Class), "conf", False, 1, dims);
  delete[] dims;

  WConfig_class->setAttributes(&attr[2], 3);

  delete attr[2];
  delete attr[3];
  delete attr[4];

  ClassPeer::setMType(WConfig_class, Class::System);

  return WConfig_class;
}

Object *WConfig_construct_x(const Class *cls, Data idr)
{
  return new WConfig(cls, idr);
}

Object *WConfig_construct(const Object *o, Bool share)
{
  return new WConfig((const Struct *)o, share);
}

static void WConfig_init_p()
{
  WConfig_Class = WConfig_make();
  constructors_x[class_ind] = WConfig_construct_x;
  constructors[class_ind] = WConfig_construct;
  hash->insert("w_config", class_ind++);
}

static void WConfig_init()
{
  WConfig_make(WConfig_Class);

  WConfig_agritems = WConfig_Class->getAttributes();
  WConfig_idr_objsz = WConfig_Class->getIDRObjectSize(&WConfig_idr_psize, 0);

  ObjectPeer::setUnrealizable(WConfig_Class, True);
}

static Status WConfig_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

WConfig::WConfig(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

WConfig::WConfig(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void WConfig::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("w_config") : WConfig_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

WConfig::WConfig(const WConfig& x) : Struct(x)
{
  userCopy(x);
}

WConfig& WConfig::operator=(const WConfig& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

WConfig::WConfig(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("w_config") : WConfig_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

WConfig::WConfig(const WConfig *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("w_config") : WConfig_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status WConfig::setName(const char *_name)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_name) + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)_name, len, 0);
  return status;

}

Status WConfig::setName(unsigned int a0, char _name)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_name, 1, from);
  return status;
}

const char *WConfig::getName(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char WConfig::getName(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status WConfig::setUser(const char *_user)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_user) + 1;

  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[3]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)_user, len, 0);
  return status;

}

Status WConfig::setUser(unsigned int a0, char _user)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[3]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)&_user, 1, from);
  return status;
}

const char *WConfig::getUser(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char WConfig::getUser(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status WConfig::setConf(const char *_conf)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_conf) + 1;

  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[4]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (Data)_conf, len, 0);
  return status;

}

Status WConfig::setConf(unsigned int a0, char _conf)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (Data)&_conf, 1, from);
  return status;
}

const char *WConfig::getConf(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char WConfig::getConf(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **Date_agritems;
static Size Date_idr_objsz, Date_idr_psize;

static StructClass *Date_make(StructClass *Date_class = 0, Schema *m = 0)
{
  if (!Date_class)
    return new StructClass("date", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[3];
  int *dims;

  dims = 0;
  attr[2] = new Attribute((m ? m->getClass("int") : Int32_Class), "julian", False, 0, dims);

  Date_class->setAttributes(&attr[2], 1);

  delete attr[2];

  ClassPeer::setMType(Date_class, Class::System);

  return Date_class;
}

Object *Date_construct_x(const Class *cls, Data idr)
{
  return new Date(cls, idr);
}

Object *Date_construct(const Object *o, Bool share)
{
  return new Date((const Struct *)o, share);
}

static void Date_init_p()
{
  Date_Class = Date_make();
  constructors_x[class_ind] = Date_construct_x;
  constructors[class_ind] = Date_construct;
  hash->insert("date", class_ind++);
}

static void Date_init()
{
  Date_make(Date_Class);

  Date_agritems = Date_Class->getAttributes();
  Date_idr_objsz = Date_Class->getIDRObjectSize(&Date_idr_psize, 0);

  ObjectPeer::setUnrealizable(Date_Class, True);
}

static Status Date_comp_realize(Database *db, Class *cls)
{
  ClassComponent *comp;
  Status status;
  Signature *sign;
  ArgType *argtype;

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "date", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "date", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "date", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("month");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "date", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "date", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "julian", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "year", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "month", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "day", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "day_of_year", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("month");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "month_of_year", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("weekday");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "day_of_week", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "toString", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "is_leap_year", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "is_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "is_greater", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "is_greater_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "is_less", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "is_less_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "is_between", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("weekday");
  comp = new FEMethod_C(db, cls, "next", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("weekday");
  comp = new FEMethod_C(db, cls, "previous", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "add_days", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "substract_days", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "substract_date", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "set_julian", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return Success;
}

static Status Date_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

Date::Date(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

Date::Date(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void Date::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("date") : Date_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

Date::Date(const Date& x) : Struct(x)
{
  userCopy(x);
}

Date& Date::operator=(const Date& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

Date::Date(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("date") : Date_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Date::Date(const Date *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("date") : Date_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status Date::setJulian(eyedblib::int32 _julian)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_julian, 1, 0);
  return status;
}

eyedblib::int32 Date::getJulian(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **Time_agritems;
static Size Time_idr_objsz, Time_idr_psize;

static StructClass *Time_make(StructClass *Time_class = 0, Schema *m = 0)
{
  if (!Time_class)
    return new StructClass("time", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[4];
  int *dims;

  dims = 0;
  attr[2] = new Attribute((m ? m->getClass("long") : Int64_Class), "usecs", False, 0, dims);

  dims = 0;
  attr[3] = new Attribute((m ? m->getClass("short") : Int16_Class), "tz", False, 0, dims);

  Time_class->setAttributes(&attr[2], 2);

  delete attr[2];
  delete attr[3];

  ClassPeer::setMType(Time_class, Class::System);

  return Time_class;
}

Object *Time_construct_x(const Class *cls, Data idr)
{
  return new Time(cls, idr);
}

Object *Time_construct(const Object *o, Bool share)
{
  return new Time((const Struct *)o, share);
}

static void Time_init_p()
{
  Time_Class = Time_make();
  constructors_x[class_ind] = Time_construct_x;
  constructors[class_ind] = Time_construct;
  hash->insert("time", class_ind++);
}

static void Time_init()
{
  Time_make(Time_Class);

  Time_agritems = Time_Class->getAttributes();
  Time_idr_objsz = Time_Class->getIDRObjectSize(&Time_idr_psize, 0);

  ObjectPeer::setUnrealizable(Time_Class, True);
}

static Status Time_comp_realize(Database *db, Class *cls)
{
  ClassComponent *comp;
  Status status;
  Signature *sign;
  ArgType *argtype;

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "get_local_time_zone", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "gmt_time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "local_time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(5);
  sign->setTypesCount(5);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(6);
  sign->setTypesCount(6);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(7);
  sign->setTypesCount(7);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(6);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8196, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "usec_time", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "second", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "millisecond", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "tz_hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "tz_minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "toString", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "is_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "is_greater", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "is_greater_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "is_less", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "is_less_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "is_between", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "add_interval", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "substract_interval", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "substract_time", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "gmt_hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "gmt_minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "microsecond", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "set_usecs", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return Success;
}

static Status Time_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

Time::Time(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

Time::Time(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void Time::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("time") : Time_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

Time::Time(const Time& x) : Struct(x)
{
  userCopy(x);
}

Time& Time::operator=(const Time& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

Time::Time(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time") : Time_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Time::Time(const Time *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time") : Time_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status Time::setUsecs(eyedblib::int64 _usecs)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_usecs, 1, 0);
  return status;
}

eyedblib::int64 Time::getUsecs(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int64 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status Time::setTz(eyedblib::int16 _tz)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)&_tz, 1, 0);
  return status;
}

eyedblib::int16 Time::getTz(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **TimeStamp_agritems;
static Size TimeStamp_idr_objsz, TimeStamp_idr_psize;

static StructClass *TimeStamp_make(StructClass *TimeStamp_class = 0, Schema *m = 0)
{
  if (!TimeStamp_class)
    return new StructClass("time_stamp", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[4];
  int *dims;

  dims = 0;
  attr[2] = new Attribute((m ? m->getClass("long") : Int64_Class), "usecs", False, 0, dims);

  dims = 0;
  attr[3] = new Attribute((m ? m->getClass("short") : Int16_Class), "tz", False, 0, dims);

  TimeStamp_class->setAttributes(&attr[2], 2);

  delete attr[2];
  delete attr[3];

  ClassPeer::setMType(TimeStamp_class, Class::System);

  return TimeStamp_class;
}

Object *TimeStamp_construct_x(const Class *cls, Data idr)
{
  return new TimeStamp(cls, idr);
}

Object *TimeStamp_construct(const Object *o, Bool share)
{
  return new TimeStamp((const Struct *)o, share);
}

static void TimeStamp_init_p()
{
  TimeStamp_Class = TimeStamp_make();
  constructors_x[class_ind] = TimeStamp_construct_x;
  constructors[class_ind] = TimeStamp_construct;
  hash->insert("time_stamp", class_ind++);
}

static void TimeStamp_init()
{
  TimeStamp_make(TimeStamp_Class);

  TimeStamp_agritems = TimeStamp_Class->getAttributes();
  TimeStamp_idr_objsz = TimeStamp_Class->getIDRObjectSize(&TimeStamp_idr_psize, 0);

  ObjectPeer::setUnrealizable(TimeStamp_Class, True);
}

static Status TimeStamp_comp_realize(Database *db, Class *cls)
{
  ClassComponent *comp;
  Status status;
  Signature *sign;
  ArgType *argtype;

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "gmt_time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "local_time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("date");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8196, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "usec_time_stamp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("date");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "date", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "time", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "year", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "month", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "day", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "second", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "millisecond", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "tz_hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "tz_minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "toString", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "plus", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "minus", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "is_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "is_greater", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "is_greater_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "is_less", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "is_less_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "is_between", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "gmt_hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "gmt_minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "microsecond", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "set_usecs", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_stamp");
  comp = new FEMethod_C(db, cls, "substract", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return Success;
}

static Status TimeStamp_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

TimeStamp::TimeStamp(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

TimeStamp::TimeStamp(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void TimeStamp::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("time_stamp") : TimeStamp_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

TimeStamp::TimeStamp(const TimeStamp& x) : Struct(x)
{
  userCopy(x);
}

TimeStamp& TimeStamp::operator=(const TimeStamp& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

TimeStamp::TimeStamp(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_stamp") : TimeStamp_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

TimeStamp::TimeStamp(const TimeStamp *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_stamp") : TimeStamp_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status TimeStamp::setUsecs(eyedblib::int64 _usecs)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_usecs, 1, 0);
  return status;
}

eyedblib::int64 TimeStamp::getUsecs(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int64 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

Status TimeStamp::setTz(eyedblib::int16 _tz)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[3]->setValue(this, (Data)&_tz, 1, 0);
  return status;
}

eyedblib::int16 TimeStamp::getTz(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **TimeInterval_agritems;
static Size TimeInterval_idr_objsz, TimeInterval_idr_psize;

static StructClass *TimeInterval_make(StructClass *TimeInterval_class = 0, Schema *m = 0)
{
  if (!TimeInterval_class)
    return new StructClass("time_interval", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[3];
  int *dims;

  dims = 0;
  attr[2] = new Attribute((m ? m->getClass("long") : Int64_Class), "usecs", False, 0, dims);

  TimeInterval_class->setAttributes(&attr[2], 1);

  delete attr[2];

  ClassPeer::setMType(TimeInterval_class, Class::System);

  return TimeInterval_class;
}

Object *TimeInterval_construct_x(const Class *cls, Data idr)
{
  return new TimeInterval(cls, idr);
}

Object *TimeInterval_construct(const Object *o, Bool share)
{
  return new TimeInterval((const Struct *)o, share);
}

static void TimeInterval_init_p()
{
  TimeInterval_Class = TimeInterval_make();
  constructors_x[class_ind] = TimeInterval_construct_x;
  constructors[class_ind] = TimeInterval_construct;
  hash->insert("time_interval", class_ind++);
}

static void TimeInterval_init()
{
  TimeInterval_make(TimeInterval_Class);

  TimeInterval_agritems = TimeInterval_Class->getAttributes();
  TimeInterval_idr_objsz = TimeInterval_Class->getIDRObjectSize(&TimeInterval_idr_psize, 0);

  ObjectPeer::setUnrealizable(TimeInterval_Class, True);
}

static Status TimeInterval_comp_realize(Database *db, Class *cls)
{
  ClassComponent *comp;
  Status status;
  Signature *sign;
  ArgType *argtype;

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_interval", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(6);
  sign->setTypesCount(6);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((ArgType_Type)4098, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "time_interval", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "day", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "hour", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "minute", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "second", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "millisecond", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "microsecond", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "is_zero", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "toString", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "plus", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "minus", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "product", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "quotient", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "is_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "is_greater", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "is_greater_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "is_less", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8194, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("time_interval");
  comp = new FEMethod_C(db, cls, "is_less_or_equal", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4100, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "set_usecs", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return Success;
}

static Status TimeInterval_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

TimeInterval::TimeInterval(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

TimeInterval::TimeInterval(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void TimeInterval::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("time_interval") : TimeInterval_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

TimeInterval::TimeInterval(const TimeInterval& x) : Struct(x)
{
  userCopy(x);
}

TimeInterval& TimeInterval::operator=(const TimeInterval& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

TimeInterval::TimeInterval(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_interval") : TimeInterval_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

TimeInterval::TimeInterval(const TimeInterval *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_interval") : TimeInterval_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status TimeInterval::setUsecs(eyedblib::int64 _usecs)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_usecs, 1, 0);
  return status;
}

eyedblib::int64 TimeInterval::getUsecs(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int64 __tmp = 0;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const Attribute **OString_agritems;
static Size OString_idr_objsz, OString_idr_psize;

static StructClass *OString_make(StructClass *OString_class = 0, Schema *m = 0)
{
  if (!OString_class)
    return new StructClass("ostring", (m ? m->getClass("struct") : Struct_Class));
  Attribute *attr[3];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new Attribute((m ? m->getClass("char") : Char_Class), "s", False, 1, dims);
  delete[] dims;

  OString_class->setAttributes(&attr[2], 1);

  delete attr[2];

  ClassPeer::setMType(OString_class, Class::System);

  return OString_class;
}

Object *OString_construct_x(const Class *cls, Data idr)
{
  return new OString(cls, idr);
}

Object *OString_construct(const Object *o, Bool share)
{
  return new OString((const Struct *)o, share);
}

static void OString_init_p()
{
  OString_Class = OString_make();
  constructors_x[class_ind] = OString_construct_x;
  constructors[class_ind] = OString_construct;
  hash->insert("ostring", class_ind++);
}

static void OString_init()
{
  OString_make(OString_Class);

  OString_agritems = OString_Class->getAttributes();
  OString_idr_objsz = OString_Class->getIDRObjectSize(&OString_idr_psize, 0);

  ObjectPeer::setUnrealizable(OString_Class, True);
}

static Status OString_comp_realize(Database *db, Class *cls)
{
  ClassComponent *comp;
  Status status;
  Signature *sign;
  ArgType *argtype;

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4105, False);
  argtype->setClname("ostring");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4102, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4103, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ostring", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "strlen", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "strcmp", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "strstr", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "substr", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "toLower", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "toUpper", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "rtrim", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8197, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "ltrim", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "concat", sign, True, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4102, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new BEMethod_OQL(db, cls, "setChar", sign, False, True, "{     this.s[offset] := c;   }");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8198, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new BEMethod_OQL(db, cls, "getChar", sign, False, True, "{     return this.s[offset];   }");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "append", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "append", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "append", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "prepend", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "prepend", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "prepend", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "insert", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "insert", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "insert", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "first", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "last", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "find", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "substr", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "substr", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "erase", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "replace", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "replace", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(5);
  sign->setTypesCount(5);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "replace", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "replace", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8193, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "reset", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new BEMethod_OQL(db, cls, "assign", sign, False, True, "{         this->s := s;         return this;   }");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "assign", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "assign", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "toLower", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "toUpper", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "rtrim", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8201, False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "ltrim", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "compare", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "compare", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((ArgType_Type)4099, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "compare", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "is_null", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "match", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8195, False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new FEMethod_C(db, cls, "length", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8453, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "split", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new Signature();
  argtype = sign->getRettype();
  argtype->setType((ArgType_Type)8453, False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((ArgType_Type)4101, False);
  argtype->setClname("");
  comp = new FEMethod_C(db, cls, "regexp_split", sign, False, True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return Success;
}

static Status OString_attrcomp_realize(Database *db, Class *cls)
{
  return Success;
}

OString::OString(Database *_db, const Dataspace *_dataspace) : Struct(_db, _dataspace)
{
  initialize(_db);
}

OString::OString(const Class *_cls, Data _idr)
{
  setClass((Class *)_cls);

  Size idr_psize;
  Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

void OString::initialize(Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("ostring") : OString_Class));

  Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  ClassPeer::newObjRealize(getClass(), this);
  ObjectPeer::setGRTObject(this, True);
  userInitialize();
}

OString::OString(const OString& x) : Struct(x)
{
  userCopy(x);
}

OString& OString::operator=(const OString& x)
{
  *(Struct *)this = Struct::operator=((const Struct &)x);
  userCopy(x);
  return *this;
}

OString::OString(const Struct *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("ostring") : OString_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

OString::OString(const OString *x, Bool share) : Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("ostring") : OString_Class));

  Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      ClassPeer::newObjRealize(getClass(), this);
    }

  ObjectPeer::setGRTObject(this, True);
  userCopy(*x);
}

Status OString::setS(const char *_s)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size size;
  Size len = ::strlen(_s) + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)_s, len, 0);
  return status;

}

Status OString::setS(unsigned int a0, char _s)
{
  gbxAutoGarbSuspender _gbxsusp_;
  Status status;
  Size from = a0;

  Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (Data)&_s, 1, from);
  return status;
}

const char *OString::getS(Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  Data data;
  Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&data, Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OString::getS(unsigned int a0, Bool *isnull, Status *rs) const
{
  gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  Status s;
  Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const char not_exit_msg[] = "class does not exist";
static const char differ_msg[] = "class differs in database and in runtime environment";

void utilsInit(void)
{
  if (hash) return;

  hash = new GenHashTable(0, 104);

  ImageType_init_p();
  Month_init_p();
  Weekday_init_p();
  Image_init_p();
  URL_init_p();
  WConfig_init_p();
  Date_init_p();
  Time_init_p();
  TimeStamp_init_p();
  TimeInterval_init_p();
  OString_init_p();
  ImageType_init();
  Month_init();
  Weekday_init();
  Image_init();
  URL_init();
  WConfig_init();
  Date_init();
  Time_init();
  TimeStamp_init();
  TimeInterval_init();
  OString_init();
}

void utilsRelease(void)
{
  delete hash;

  ImageType_Class->release();
  Month_Class->release();
  Weekday_Class->release();
  Image_Class->release();
  URL_Class->release();
  WConfig_Class->release();
  Date_Class->release();
  Time_Class->release();
  TimeStamp_Class->release();
  TimeInterval_Class->release();
  OString_Class->release();
}

static Status
utilsSchemaUpdate(Schema *m, Database *db)
{
  m->setName("eyedb");
  Status status;
  EnumClass *ImageType_class = ImageType_make(0, m);
  if (!m->getClass("image_type"))
    {
      status = m->addClass(ImageType_class);
      if (status)
        return status;
    }
  EnumClass *Month_class = Month_make(0, m);
  if (!m->getClass("month"))
    {
      status = m->addClass(Month_class);
      if (status)
        return status;
    }
  EnumClass *Weekday_class = Weekday_make(0, m);
  if (!m->getClass("weekday"))
    {
      status = m->addClass(Weekday_class);
      if (status)
        return status;
    }
  StructClass *Image_class = Image_make(0, m);
  if (!m->getClass("image"))
    {
      status = m->addClass(Image_class);
      if (status)
        return status;
    }
  StructClass *URL_class = URL_make(0, m);
  if (!m->getClass("URL"))
    {
      status = m->addClass(URL_class);
      if (status)
        return status;
    }
  StructClass *WConfig_class = WConfig_make(0, m);
  if (!m->getClass("w_config"))
    {
      status = m->addClass(WConfig_class);
      if (status)
        return status;
    }
  StructClass *Date_class = Date_make(0, m);
  if (!m->getClass("date"))
    {
      status = m->addClass(Date_class);
      if (status)
        return status;
    }
  StructClass *Time_class = Time_make(0, m);
  if (!m->getClass("time"))
    {
      status = m->addClass(Time_class);
      if (status)
        return status;
    }
  StructClass *TimeStamp_class = TimeStamp_make(0, m);
  if (!m->getClass("time_stamp"))
    {
      status = m->addClass(TimeStamp_class);
      if (status)
        return status;
    }
  StructClass *TimeInterval_class = TimeInterval_make(0, m);
  if (!m->getClass("time_interval"))
    {
      status = m->addClass(TimeInterval_class);
      if (status)
        return status;
    }
  StructClass *OString_class = OString_make(0, m);
  if (!m->getClass("ostring"))
    {
      status = m->addClass(OString_class);
      if (status)
        return status;
    }

  ImageType_make(ImageType_class, m);
  Month_make(Month_class, m);
  Weekday_make(Weekday_class, m);
  Image_make(Image_class, m);
  URL_make(URL_class, m);
  WConfig_make(WConfig_class, m);
  Date_make(Date_class, m);
  Time_make(Time_class, m);
  TimeStamp_make(TimeStamp_class, m);
  TimeInterval_make(TimeInterval_class, m);
  OString_make(OString_class, m);

  if (!db) return Success;

  if (!ImageType_class->compare(m->getClass("image_type")))
    return Exception::make(IDB_ERROR, "'ImageType' %s", differ_msg);
  if (!Month_class->compare(m->getClass("month")))
    return Exception::make(IDB_ERROR, "'Month' %s", differ_msg);
  if (!Weekday_class->compare(m->getClass("weekday")))
    return Exception::make(IDB_ERROR, "'Weekday' %s", differ_msg);
  if (!Image_class->compare(m->getClass("image")))
    return Exception::make(IDB_ERROR, "'Image' %s", differ_msg);
  if (!URL_class->compare(m->getClass("URL")))
    return Exception::make(IDB_ERROR, "'URL' %s", differ_msg);
  if (!WConfig_class->compare(m->getClass("w_config")))
    return Exception::make(IDB_ERROR, "'WConfig' %s", differ_msg);
  if (!Date_class->compare(m->getClass("date")))
    return Exception::make(IDB_ERROR, "'Date' %s", differ_msg);
  if (!Time_class->compare(m->getClass("time")))
    return Exception::make(IDB_ERROR, "'Time' %s", differ_msg);
  if (!TimeStamp_class->compare(m->getClass("time_stamp")))
    return Exception::make(IDB_ERROR, "'TimeStamp' %s", differ_msg);
  if (!TimeInterval_class->compare(m->getClass("time_interval")))
    return Exception::make(IDB_ERROR, "'TimeInterval' %s", differ_msg);
  if (!OString_class->compare(m->getClass("ostring")))
    return Exception::make(IDB_ERROR, "'OString' %s", differ_msg);

  db->transactionBegin();

  if ((status = Date_comp_realize(db, m->getClass("date")))) return status;

  if ((status = Time_comp_realize(db, m->getClass("time")))) return status;

  if ((status = TimeStamp_comp_realize(db, m->getClass("time_stamp")))) return status;

  if ((status = TimeInterval_comp_realize(db, m->getClass("time_interval")))) return status;

  if ((status = OString_comp_realize(db, m->getClass("ostring")))) return status;

  if ((status = Image_attrcomp_realize(db, m->getClass("image")))) return status;

  if ((status = URL_attrcomp_realize(db, m->getClass("URL")))) return status;

  if ((status = WConfig_attrcomp_realize(db, m->getClass("w_config")))) return status;

  if ((status = Date_attrcomp_realize(db, m->getClass("date")))) return status;

  if ((status = Time_attrcomp_realize(db, m->getClass("time")))) return status;

  if ((status = TimeStamp_attrcomp_realize(db, m->getClass("time_stamp")))) return status;

  if ((status = TimeInterval_attrcomp_realize(db, m->getClass("time_interval")))) return status;

  if ((status = OString_attrcomp_realize(db, m->getClass("ostring")))) return status;
  status = m->realize();
  if (status) return status;
  db->transactionCommit();
  return Success;
}

Status utilsSchemaUpdate(Database *db)
{
  return utilsSchemaUpdate(db->getSchema(), db);
}

Status utilsSchemaUpdate(Schema *m)
{
  return utilsSchemaUpdate(m, NULL);
}

Object *utilsMakeObject(Object *o, Bool remove)
{
  if (!o->getClass()) return (Object *)0;
  if (ObjectPeer::isGRTObject(o))
    return o;
  int ind = hash->get(o->getClass()->getName());
  if (ind < 0 && (!o->getClass()->getStrictAliasName() || (ind = hash->get(o->getClass()->getStrictAliasName())) < 0)) return 0;
  Object *co = constructors[ind](o, (remove ? True : False));
  ObjectPeer::setClass(co, o->getClass());
  if (remove) o->release();
  if (co->getDatabase())
    co->getDatabase()->cacheObject(co);
  return co;
}

Status utilsDatabase::open(Connection *ch, Database::OpenFlag flag, const char *userauth, const char *passwdauth)
{
    return open(ch, flag, 0, userauth, passwdauth);
}

Status utilsDatabase::open(Connection *ch, Database::OpenFlag flag, const OpenHints *hints, const char *userauth, const char *passwdauth)
{
  Status status = Database::open(ch, flag, hints, userauth, passwdauth);
  if (status) return status;
  transactionBegin();
  status = utilsDatabase::checkSchema(getSchema());
  transactionCommit();

  if (!status) add(hash, constructors_x);

  return status;
}

void utilsDatabase::setConsApp(Database *_db)
{
  _db->add(hash, constructors_x);
}

static void append(char *&s, const char *m1, const char *m2)
{
  if (!s) {s = (char *)malloc(strlen(m1)+strlen(m2)+2); *s = 0;}
  else s = (char *)realloc(s, strlen(s)+strlen(m1)+strlen(m2)+2);
  strcat(s, m1);
  strcat(s, m2);
  strcat(s, "\n");
}

Bool utilsDatabase::getDynamicGetErrorPolicy() {
   throw *Exception::make(IDB_ERROR, "getDynamicGetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

Bool utilsDatabase::getDynamicSetErrorPolicy() {
   throw *Exception::make(IDB_ERROR, "getDynamicSetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

void utilsDatabase::setDynamicGetErrorPolicy(Bool policy) {
   throw *Exception::make(IDB_ERROR, "setDynamicGetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

void utilsDatabase::setDynamicSetErrorPolicy(Bool policy) {
   throw *Exception::make(IDB_ERROR, "setDynamicSetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

Status utilsDatabase::checkSchema(Schema *m)
{
  Class *cl;
  char *s = 0;

  if (!(cl = m->getClass("image_type")))
    append(s, "'image_type' ", not_exit_msg);
  else if (!ImageType_Class->compare(cl))
    append(s, "'ImageType' ", differ_msg);
  if (!(cl = m->getClass("month")))
    append(s, "'month' ", not_exit_msg);
  else if (!Month_Class->compare(cl))
    append(s, "'Month' ", differ_msg);
  if (!(cl = m->getClass("weekday")))
    append(s, "'weekday' ", not_exit_msg);
  else if (!Weekday_Class->compare(cl))
    append(s, "'Weekday' ", differ_msg);
  if (!(cl = m->getClass("image")))
    append(s, "'image' ", not_exit_msg);
  else if (!Image_Class->compare(cl))
    append(s, "'Image' ", differ_msg);
  if (!(cl = m->getClass("URL")))
    append(s, "'URL' ", not_exit_msg);
  else if (!URL_Class->compare(cl))
    append(s, "'URL' ", differ_msg);
  if (!(cl = m->getClass("w_config")))
    append(s, "'w_config' ", not_exit_msg);
  else if (!WConfig_Class->compare(cl))
    append(s, "'WConfig' ", differ_msg);
  if (!(cl = m->getClass("date")))
    append(s, "'date' ", not_exit_msg);
  else if (!Date_Class->compare(cl))
    append(s, "'Date' ", differ_msg);
  if (!(cl = m->getClass("time")))
    append(s, "'time' ", not_exit_msg);
  else if (!Time_Class->compare(cl))
    append(s, "'Time' ", differ_msg);
  if (!(cl = m->getClass("time_stamp")))
    append(s, "'time_stamp' ", not_exit_msg);
  else if (!TimeStamp_Class->compare(cl))
    append(s, "'TimeStamp' ", differ_msg);
  if (!(cl = m->getClass("time_interval")))
    append(s, "'time_interval' ", not_exit_msg);
  else if (!TimeInterval_Class->compare(cl))
    append(s, "'TimeInterval' ", differ_msg);
  if (!(cl = m->getClass("ostring")))
    append(s, "'ostring' ", not_exit_msg);
  else if (!OString_Class->compare(cl))
    append(s, "'OString' ", differ_msg);
  if (s) {Status status = Exception::make(s); free(s); return status;}
  return Success;
}

Bool utils_set_oid_check(Bool _oid_check)
{
  Bool old = oid_check;
  oid_check = _oid_check;
  return old;
}

Bool utils_get_oid_check()
{
  return oid_check;
}

}
