
-------------------------------------------------------------------------------
                            Topic Virtual attributes
-------------------------------------------------------------------------------
                                 Specifications
-------------------------------------------------------------------------------
Date: 13/09/06
Author: Eric Viara <viara@sysra.com>
-------------------------------------------------------------------------------



-------------------------------------------------------------------------------

class D {
  static string d(in object);
};

class C {

  string name;
  index on name;

  // methods
  string   f();
  string[] g();
  static string[] i(in C);
  string j() %oql{ return "hello " + name; %}

  // virtual attributes (keyword 'attribute' is optional)
  virtual attribute string f1 as f();
  virtual attribute string f2[] as g();
  virtual attribute string f3[] as i(in C);
  virtual attribute string f4 as D:ddi(in object);
  virtual attribute string f5 as j();

  // indexes on virtual attributes
  index on f1;
  index <type = hash, hints = "", name = "jjj"> on f2;
  index on f3;
};

// advanced
class C {
  string name;

  // standard way
  string[] g() %oql{ return builtin::split_in_words(this.name); %}
  string words[] as g();

  // advanced ways

  virtual attribute string f1 as f();
  // is equivalent to:
  virtual attribute string f1 as f()();

  virtual attribute string f3[] as i(in C);
  // is equivalent to:
  virtual attribute string f3[] as i(in C)(this);

  // --- different syntaxes ---
  // full syntax
  virtual attribute string words[] as builtin::split_in_words(in string)(name);
                                                              // or this.name
  // without attribute
  virtual string words[] as builtin::split_in_words(in string)(name);
  // without virtual
  string words[] as builtin::split_in_words(in string)(name);
  // without attribute, virtual and builtin
  string words[] as split_in_words(in string)(name); 

  index on words;

  // idea ?
  int ii;
  string[] fg(in string, in int, int int, in string);
  string attr[] as fg(in string, in int, int int, in string)
                 (name, ii, 3, "hello"); 

  // alias on function : idea ?
  string[] g() as builtin::split_in_words(this.name);
  // bof...
};
